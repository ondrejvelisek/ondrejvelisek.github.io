<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ondrejvelisek.github.io/blog</id>
    <title>Ondrej Velisek Blog</title>
    <updated>2024-02-23T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ondrejvelisek.github.io/blog"/>
    <subtitle>Ondrej Velisek Blog</subtitle>
    <icon>https://ondrejvelisek.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[What is great on hooks & forget in RSC?]]></title>
        <id>https://ondrejvelisek.github.io/blog/2024/02/23/what-the-f-is-f</id>
        <link href="https://ondrejvelisek.github.io/blog/2024/02/23/what-the-f-is-f"/>
        <updated>2024-02-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[UI = f(state). Every one of us knows this formula. But how does it translate to real world?]]></summary>
        <content type="html"><![CDATA[<p><code>UI = f(state)</code>. Every one of us knows this formula. But how does it translate to real world?
What is <code>UI</code>? What is <code>state</code>? And what the f* is <em><code>f</code></em>? Here is my view.</p>
<p>I ignore how state is mutated. But I reckon it can mutate.</p>
<p><img decoding="async" loading="lazy" src="https://ondrejvelisek.github.io/assets/images/state-f-UI-150b8e18eed68d44470587431e671f2f.png" title="UI is a function of State" width="1920" height="960" class="img__Ss2"></p>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="what-is-state">What is <code>state</code>?<a href="https://ondrejvelisek.github.io/blog/2024/02/23/what-the-f-is-f#what-is-state" class="hash-link" aria-label="Direct link to what-is-state" title="Direct link to what-is-state">​</a></h2>
<p>Look again: <code>UI = f(state)</code>. In other words <code>state</code> is what our <code>UI</code> depends on. If dependency changes, we want to change the UI. It is called reactivity.</p>
<p>I believe the <code>state</code> is more than just in-memory local component state (<code>useState</code>) or in-memory global app state (Redux, Jotai, Zustand).
I'm not alone (
<a href="https://tkdodo.eu/blog/react-query-as-a-state-manager" target="_blank" rel="noopener noreferrer">TkDodo</a>,
<a href="https://www.youtube.com/watch?v=ukpgxEemXsk" target="_blank" rel="noopener noreferrer">ByteGrad (YouTube)</a>,
<a href="https://x.com/kentcdodds/status/1349173470567964673" target="_blank" rel="noopener noreferrer">Kent C. Dodds</a>,
<a href="https://daverupert.com/2024/02/ui-states/" target="_blank" rel="noopener noreferrer">Dave Rupert</a>,
<a href="https://overreacted.io/the-two-reacts/" target="_blank" rel="noopener noreferrer">Dan Abramov</a>
). Many devs agrees at least URL and server data are some kind of state too. But I think it is much more. Lets place some <code>UI</code> examples:</p>
<ul>
<li>Blog post <code>UI</code> depends on slug present in <em>URL</em> address.</li>
<li>Server files <code>UI</code> explorer depends on <em>server files</em>.</li>
<li>Newest movies list <code>UI</code> depends on <em>external resource</em> of OMDB.</li>
<li>Ticking clock <code>UI</code> depends on <em>time</em>.</li>
<li>Drawing canvas <code>UI</code> depends on <em>mouse</em> position.</li>
<li>User profile <code>UI</code> depends on session token stored in <em>cookie</em>.</li>
<li>Keep me signed on this device <code>UI</code> depends on flag in <em>local storage</em>.</li>
<li>OS prefered dark mode <code>UI</code> depends on <em>OS setting</em>.</li>
<li>Devtools debug <code>UI</code> depends on <em>env variable</em>.</li>
<li>Panoramatic background <code>UI</code> depends on scroll position of <em>DOM</em> element.</li>
<li>... OK you got the idea.</li>
</ul>
<p>Its important to say that <code>state</code> may be <strong>derived</strong>. Examples:</p>
<ul>
<li>Current post <em>slug</em> depends on <em>URL</em>.</li>
<li>Current post <em>minutes read</em> depends on slug in <em>URL</em> and <em>server files</em>.</li>
<li>Current <em>user role</em> depends on <em>server database</em> authorization data and session token stored in <em>cookie</em>.</li>
<li><em>Prefered dark mode</em> depends on <em>local storage</em> and <em>OS setting</em> (storage as user preference and OS as default).</li>
<li>Arkanoid <em>paddle position</em> depends on <em>time</em> and arrow <em>pressed keys</em></li>
<li>... got it?</li>
</ul>
<p>Derived state depends on another state. And should change when its dependencies changes.
In other words, be reactive. Great article from <a href="https://reacttraining.com/blog/derived-state" target="_blank" rel="noopener noreferrer">React Training - Derived State</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="what-is-ui">What is <code>UI</code>?<a href="https://ondrejvelisek.github.io/blog/2024/02/23/what-the-f-is-f#what-is-ui" class="hash-link" aria-label="Direct link to what-is-ui" title="Direct link to what-is-ui">​</a></h2>
<p>It is what users perceive with their senses. Usually with eyes on screen. On web it is represented with <em>DOM</em>.
It could be also sounds playing, haptic vibration feedback, flashlight, etc. But lets stick only with <em>DOM</em> for now.</p>
<p>As dev I expect framework to provide tools to update <em>DOM</em> when state or derived state changes.
In React it is VDOM.</p>
<p>Note that <em>DOM</em> is classified as both <code>UI</code> and <code>state</code>. If we use <em>DOM</em> as state and let our UI depends on it, we create cyclic dependency.
Be careful in such situation to not create infinite loops.</p>
<p><img decoding="async" loading="lazy" src="https://ondrejvelisek.github.io/assets/images/what-the-f-is-f-4b793ba7d089e77ce02d7f0116d87007.png" title="What the f* is f?" width="1920" height="960" class="img__Ss2"></p>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="what-the-f-is-f">What the f* is <em><code>f</code></em>?<a href="https://ondrejvelisek.github.io/blog/2024/02/23/what-the-f-is-f#what-the-f-is-f" class="hash-link" aria-label="Direct link to what-the-f-is-f" title="Direct link to what-the-f-is-f">​</a></h2>
<p><em><code>f</code></em> is something which connects <code>state</code> and <code>UI</code>.
You may say it is component tree with its render function. And you are IMO partialy right.</p>
<p>Because this <em><code>f</code></em> function usually produces maaaaany UI pieces,
it is "neccesity" to split the mental load into reusable smaller <code>f</code>s - components.
<a href="https://overreacted.io/a-chain-reaction/" target="_blank" rel="noopener noreferrer">Dan Abramov</a> great article about it.
There are some properties component must meet to be helpful.</p>
<ol>
<li>Composable - Ability to compose components into the full UI. Obviously.</li>
<li>Reusable - Ability to define name and reuse component in different place. Also ability to pass arbitrary configuration (possibly reactive state) to adjust its behavior (props).</li>
<li>Colocated - Name, render logic, necessary state connetions, state derivation logic, documentation etc. should be placed within/beside component. If not, devs jumps back and forth in a codebase. Inconvenient.</li>
<li>Encapsulated - Ability to work on a component independently by default. Opt-in to break barier. If not met, dev must mentaly thing about other code pieces. Which brings back the mental load.</li>
<li>Reactive - Component must react on connected state the dev chooses. Any component on any state. If some rules are required to connect some state, it makes the development jammed.</li>
<li>Arbitrary - The components boundaries must obey to the dev needs. If something forces component to split (or not to split), it effectivly removing the reason why components exists.</li>
</ol>
<p>Example. React components ergonomics.</p>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token plain">fucntion </span><span class="token function" style="color:rgb(130, 170, 255)">Post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">slug</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">                  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Name and state received via props</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> posts </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useQuery</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">fetchPosts</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// state received via hook</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> post </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> posts</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">slug</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain">           </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// derivation logic</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">           </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// JSX UI description</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Name</strong> of function to be referencable.</li>
<li><strong>Receive state</strong> via props or hooks (or higher order components).</li>
<li><strong>Derive state</strong> before JSX is produced. Right within render function or separated into custom function.</li>
<li><strong>Produce UI description</strong> in a form of JSX which is then consumed by VDOM.</li>
</ul>
<p>I said partialy. Components does not directly connects to states. They just receives a value/connection.</p>
<p><img decoding="async" loading="lazy" src="https://ondrejvelisek.github.io/assets/images/render-is-not-f-1800ec95e683295f750220bb6a5bdc01.png" title="f is not just component tree render function" width="1920" height="960" class="img__Ss2"></p>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="hooks-to-connect-state">Hooks to connect state<a href="https://ondrejvelisek.github.io/blog/2024/02/23/what-the-f-is-f#hooks-to-connect-state" class="hash-link" aria-label="Direct link to Hooks to connect state" title="Direct link to Hooks to connect state">​</a></h2>
<p>We need some way to choose states our component depends on. We want to subscribe/observe changes and execute derivation and rendering logic with new values.</p>
<p>Hooks do a great job with its smart <code>useEffect</code> and <code>useRef</code>. Much hated for its ergonomics, but IMO does the job conceptually right.
Lets call custom hooks using <code>useEffect</code> and <code>useRef</code> <strong>connection hooks</strong>.</p>
<p>Many libraries like <code>tanstack-query</code> for external resources, <code>react-router</code> for URL or <code>react-use</code> for many kind of states were created.
They allows us (app devs) to connect to the state with one line of code from within the component. And dont car much how.
Reusable, colocated, encapsulated, reactive.</p>
<p>Those connecting hooks are a missing glue between state and a component render logic.
They subscribe to the state changes and make necessary derivation and rednering logic re-run accordingly.</p>
<p><img decoding="async" loading="lazy" src="https://ondrejvelisek.github.io/assets/images/hooks-fcd3a4b6afb5b3ff3ef4ec0f155945df.png" title="Hooks allows to connect to all kind of states" width="1920" height="960" class="img__Ss2"></p>
<p>IMO observer pattern is best for DX. But sometimes it is not possible or wanted usually for performance.
Typically for states far away from client like server data.
Even for them we have mechanisms like websockets or long polling.
But usually we fallback to initial fetch during either component mount, server request or build.
Then caching, invalidation and optimistic update mechanisms must enter the scene.
But call them connecting hooks anyway.</p>
<p>There are hooks which creates in-memory local component state itself <code>useState</code> and <code>useReducer</code>.
But lets stick with connecting word too.</p>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="answer">Answer<a href="https://ondrejvelisek.github.io/blog/2024/02/23/what-the-f-is-f#answer" class="hash-link" aria-label="Direct link to Answer" title="Direct link to Answer">​</a></h2>
<div class="language-js codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-js codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token constant" style="color:rgb(130, 170, 255)">UI</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">f</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">render</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">derive</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">connect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is conceptually clean and mentally relieving model. I believe many devs love React 16.8+ because of those principles.
I'm afraid new React server components breaks some of its beauty.
But lets close this post short a positive and keep this topic till the next time. :)</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Practical limits of React hooks - Recursion]]></title>
        <id>https://ondrejvelisek.github.io/blog/2022/03/23/practical-limits-of-react-hooks-recursion</id>
        <link href="https://ondrejvelisek.github.io/blog/2022/03/23/practical-limits-of-react-hooks-recursion"/>
        <updated>2022-03-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[While ago, I started using React hooks. The simplicity, homogenity and composability sounded great.]]></summary>
        <content type="html"><![CDATA[<p>While ago, I started using React hooks. The simplicity, homogenity and composability sounded great.
Both components and hooks are simple functions. I can easily react on state changes from memory,
local storage, location URL and server the same way - with hooks. Mental model stays simple.
My app is just a big function which consumes state and produces DOM. This big function is composed
of a smaller functions which are composed of smaller functions and so on. But there were obstacles
I've started to encounter and in the end I hit the hard limit of React hooks.</p>
<blockquote>
<p>UPDATE 2024: new React <a href="https://react.dev/reference/react/use" target="_blank" rel="noopener noreferrer"><code>use</code></a> hook may finally solve following limitation
(if you accept <code>&lt;Suspense/&gt;</code> as a good pattern)</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="model-app">Model app<a href="https://ondrejvelisek.github.io/blog/2022/03/23/practical-limits-of-react-hooks-recursion#model-app" class="hash-link" aria-label="Direct link to Model app" title="Direct link to Model app">​</a></h2>
<p>Each app has some data model defined with entities and relations between them. Lets say we have company
Department and Employee where department consists of other departments and/or direct employees.
One employee can directly work for exactly one department. Cycles in department hierarchy are prohibited.</p>
<p>Our Backend implements REST endpoints.</p>
<div class="language-code codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_zAEH">/departments</div><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-code codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token plain">returns list of all department ids</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-code codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_zAEH">/departments/:departmentId</div><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-code codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token plain">returns list of sub-department ids</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">and list of direct employee ids</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There are three product requirements.</p>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="pleasant-walk-with-basic-hooks">Pleasant walk with basic hooks<a href="https://ondrejvelisek.github.io/blog/2022/03/23/practical-limits-of-react-hooks-recursion#pleasant-walk-with-basic-hooks" class="hash-link" aria-label="Direct link to Pleasant walk with basic hooks" title="Direct link to Pleasant walk with basic hooks">​</a></h2>
<p>First product requirement is simple. User selects a department and wants to see number of direct employees.
Pfff, its simple. Just implement this custom hook which uses department REST endpoint and use it in a component.</p>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    departmentId</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">useDirectEmployeeIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">length</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDirectEmployeeIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    departmentId</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">useDepartment</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">directEmployeeIds</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDepartment</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    departmentId</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">Department</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">useQuery</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">'departments'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> departmentId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">fetch</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">/departments/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">departmentId</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Our backend implements exactly this endpoints so we use <code>react-query</code> and we are done.
There are some loading and error states which I omitted, we can use fancy Suspend and ErrorBoundary,
but we understand the code.</p>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="obstacles-with-looping">Obstacles with looping<a href="https://ondrejvelisek.github.io/blog/2022/03/23/practical-limits-of-react-hooks-recursion#obstacles-with-looping" class="hash-link" aria-label="Direct link to Obstacles with looping" title="Direct link to Obstacles with looping">​</a></h2>
<p>Second product requirement is simple. User needs to select multiple departments and see sum of direct employees.
Ok, simple. I already have code for one. So simply loop it over multiple selected departments and sum the result.</p>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> totalCount </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">sum</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    departmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        departmentId </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wait! It is a hook and there are rule of hooks. Anoying but still doable.
Lets reimplement <code>useDirectEmployeeCount</code> to support multiple department ids.
Then I can sum them like this.</p>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> departmentCounts </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> totalCount </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">sum</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentCounts</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    departmentIds</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">useDirectEmployeeIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">employeeIds </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> employeeIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>But wait! I need to reimplement <code>useDirectEmployeeIds</code> too. Very anoying.</p>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDirectEmployeeIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    departmentIds</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">useDepartment</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">department </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> department</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">directEmployeeIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>But wait! Grrr...</p>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDepartment</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    departmentIds</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token maybe-class-name">Department</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">useQueries</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentId </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        queryKey</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">'departments'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> departmentId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">queryFn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">fetch</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">/departments/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">departmentId</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">result </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> result</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Uf. Done. I'm glad it is a small project with just three hooks. Tell me the last requirement.</p>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="limits-with-recursion">Limits with recursion<a href="https://ondrejvelisek.github.io/blog/2022/03/23/practical-limits-of-react-hooks-recursion#limits-with-recursion" class="hash-link" aria-label="Direct link to Limits with recursion" title="Direct link to Limits with recursion">​</a></h2>
<p>Third and last product requirement is simple. User needs to select department and see sum of direct and
indirect employees (including employees from all sub-departments and their sub-departments and so on).
Ok, simple. I already have code for multiple departments. So simply recursively call it and sum the result.</p>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useIndirectEmployeeCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    departmentIds</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> directCount </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> departments </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDepartment</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> subDepartmentIds </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> departments</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">flatMap</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">department </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> department</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">subDepartmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> indirectCount </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useIndirectEmployeeCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">subDepartmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> directCount </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> indirectCount</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wait.</p>
<blockquote>
<p>Error: Maximum Call Stack Size Exceeded</p>
</blockquote>
<p>Oh. You almost got me. I just forgot a recursive break, right?</p>
<div class="language-tsx codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-tsx codeBlock_TAPP thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useIndirectEmployeeCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    departmentIds</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Array</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> directCount </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> departments </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useDepartment</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> subDepartmentIds </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> departments</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">flatMap</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">department </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> department</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">subDepartmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">subDepartmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">===</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> directCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> indirectCount </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useIndirectEmployeeCount</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">subDepartmentIds</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> directCount </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> indirectCount</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wait.</p>
<blockquote>
<p>Error: React Hook "useIndirectEmployeeCount" is called conditionally.</p>
</blockquote>
<p>...</p>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="last-words">Last words<a href="https://ondrejvelisek.github.io/blog/2022/03/23/practical-limits-of-react-hooks-recursion#last-words" class="hash-link" aria-label="Direct link to Last words" title="Direct link to Last words">​</a></h2>
<p>Mental model stays simple. Everything is a simple function. My app is one big function composed of smaller and
smaller ones. It trully sounds great! But in a real world, hooks are not so simple, homogen and composable.
There are obstacles and limits mainly because of rule of hooks.</p>
<p>This post is not about saying React hooks are bad. I wrote it because I did not find any resources
on such obstacles and limits. The React world looks like hooks are always pleasant walk trought the rosy garden.
But they are not.</p>
<p>For now I don't know how to elegantly solve the recusrion example. Are there some resources on this?
Do you have following thougts? Maybe I'm not the only one struggling. Thanks for reading.</p>]]></content>
    </entry>
</feed>