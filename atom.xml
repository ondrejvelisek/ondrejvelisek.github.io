<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ondrejvelisek.github.io/</id>
    <title>Ondrej Velisek Blog</title>
    <updated>2024-03-19T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ondrejvelisek.github.io/"/>
    <subtitle>Ondrej Velisek Blog</subtitle>
    <icon>https://ondrejvelisek.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[How Next.js breaks React Fundamentals (Examples)]]></title>
        <id>https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/</id>
        <link href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/"/>
        <updated>2024-03-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In the front-end world, there's an ongoing war over performance.]]></summary>
        <content type="html"><![CDATA[<p>In the front-end world, there's an ongoing war over performance.
RSC (React Server Components), currently implemented in the Next.js App router, serve as the official weapon aimed at improving startup performance.
However, it seems that in the midst of this battle, we've forgotten about some fundamentals, resulting in a degraded DX (Developer Experience).
This article aims to provide examples of such DX issues in the current Next.js API.
Towards the end, I outline a better proposal.</p>
<!-- -->
<p>I want to make it explicitly clear that it's not my intention to blame, dishonor, or offend React and Next.js maintainers.
I have respect for each one of them and appreciate their work. Thank you for your contributions.
However, at the same time, I want to present what I believe is wrong about the current API design in a clear and constructive manner.
This way, we can foster a discussion based on specific examples.</p>
<p>This article loosely follows on from my previous piece, <a href="https://ondrejvelisek.github.io/conceptual-model-of-react-and-rsc/">Conceptual Model of React and RSC</a>.
Reading it beforehand will provide better context for the following text, which I highly recommend.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="dx--performance">DX &gt; Performance<a href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/#dx--performance" class="hash-link" aria-label="Direct link to DX > Performance" title="Direct link to DX > Performance">​</a></h2>
<p>First of all, let me defend the idea that <abbr title="Developer Experience">DX</abbr> is more important than performance in terms of framework API design.</p>
<p>What do I, as an app developer, do when a change requirement arrives?
I throw some nasty components on a screen and start crafting.
I add basic visuals, connect real data, make it interactive, improve styles, add loading, error, and empty UI, write tests, refactor component structure, solve bugs, optimize performance.</p>
<p>I usually do it in this order. I'm sure each of us prefers a different order. Some do <abbr title="Test Driven Development">TTD</abbr>,
some like to start with a pixel-perfect design with mockup data. It's okay.
However, no devs I know care about performance at first.
Actually, some believe it is bad practice and should be avoided.
Donald E. Knuth believes "Premature optimization is the root of all evil." or
Michael A. Jackson stated, "First rule of optimization: Don't do it."</p>
<p>To be crystal clear: I'm not trying to convince you to not take a performance-first approach.
I'm trying to convince you that many developers do not optimize at first. And it works well for us.
A general-purpose framework should, at least, support, but better embrace this flow.
Fast delivery supported by great <abbr title="Developer Experience">DX</abbr> with the best possible performance out-of-the-box.
Then provide easy optimization tooling like refactoring patterns, optimizer hinting, more aggressive caching config, etc.</p>
<p>Personally, I'm okay if a framework brings some syntax overhead due to performance optimization.
But it is unacceptable for me to hurt the clear conceptual model and fundamental principles.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="fundamentals">Fundamentals<a href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/#fundamentals" class="hash-link" aria-label="Direct link to Fundamentals" title="Direct link to Fundamentals">​</a></h2>
<p>In the <a href="https://ondrejvelisek.github.io/conceptual-model-of-react-and-rsc/">previous article</a>, I described a set of fundamental properties I believe any front-end framework should follow to provide a good <abbr title="Developer Experience">DX</abbr>. Let's quickly recap them.</p>
<ol>
<li>
<p><strong>Composable</strong> - Or Homogeneity. The ability to compose components into the full UI.
Ability to place any component into any other component without changing its behavior.</p>
</li>
<li>
<p><strong>Reusable</strong> - The ability to define a name and reuse a component in a different place. Also, it involves passing arbitrary configuration (possibly reactive state) to adjust its behavior (props).</p>
</li>
<li>
<p><strong>Colocated</strong> - The ability to place all dependencies inside a component: name, render logic, necessary state connections, state derivation logic, styling, documentation, etc. If this is not met, developers have to jump back and forth in a codebase.</p>
</li>
<li>
<p><strong>Encapsulated</strong> - The ability to work on a component independently. All paths to affect the component from outside should be blocked by default. Breaking the barrier, for example, by exposing props, should be an opt-in feature. If this is not met, developers must mentally consider other code pieces.</p>
</li>
<li>
<p><strong>Reactive</strong> - A component must react to the connected state chosen by the developer. Any component must be able to connect to any state, and the same applies to derivation hooks. If certain rules are required, development becomes jammed.</p>
</li>
<li>
<p><strong>Arbitrary</strong> - The component's boundaries must obey the developer's needs. Nothing must force a component to split or not to split, as it would destroy its purpose.</p>
</li>
</ol>
<p>It seems to me that Next's implementation of <abbr title="React Server Components">RSC</abbr> breaks some of these fundamental properties due to their performance-first design. Examples follow now.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="sample-component">Sample Component<a href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/#sample-component" class="hash-link" aria-label="Direct link to Sample Component" title="Direct link to Sample Component">​</a></h2>
<p>Imagine a requirement to create a page with a random quote about programming on each page refresh. Quotes are saved in a remote database.
How would you implement it in the Next.js App router?</p>
<p>Next.js <a href="https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating" target="_blank" rel="noopener noreferrer">data fetching docs</a>
suggest a simple async-await function within the component render function.
Let's assume we have the <code>random(from, to)</code> lodash-like function for brevity.</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">ProgrammingQuotes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)">// Here I want to connect to the external database state of quotes </span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> quotes </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">fetch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'/quotes'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)">// Here I want to connect to a random number state</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> index </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">random</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> quotes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag" style="color:rgb(78, 201, 176)">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">quotes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag" style="color:rgb(78, 201, 176)">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Just place it somewhere on a page and we're done. Excellent <abbr title="Developer Experience">DX</abbr> so far.
It's a server-only component by default. Resulting in a small bundle, no client-server round trips,
great <abbr title="First Contentful Paint">FCP</abbr> and <abbr title="Largest Contentful Paint">LCP</abbr>,
No <abbr title="Cumulative Layout Shift">CLS</abbr>. Awesome startup performance as promised.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="1-forced-to-lift-state-up">1. Forced to Lift State up<a href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/#1-forced-to-lift-state-up" class="hash-link" aria-label="Direct link to 1. Forced to Lift State up" title="Direct link to 1. Forced to Lift State up">​</a></h2>
<p>Imagine a change requirement. Our UX department likes the component and wants it in an existing comments feed modal.
This modal is currently a client component. Somebody just wrote it as client because it needs some client-side state.</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token string" style="color:rgb(206, 145, 120)">'use client'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">FeedModal</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">open</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> setOpen</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useState</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token boolean">false</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">Button</span><span class="token tag" style="color:rgb(78, 201, 176)"> </span><span class="token tag attr-name" style="color:rgb(156, 220, 254)">toggle</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(212, 212, 212)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token tag script language-javascript" style="color:rgb(78, 201, 176)">setOpen</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain-text">Show comments</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">Button</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">Modal</span><span class="token tag" style="color:rgb(78, 201, 176)"> </span><span class="token tag attr-name" style="color:rgb(156, 220, 254)">opened</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(212, 212, 212)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token tag script language-javascript" style="color:rgb(78, 201, 176)">opened</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag" style="color:rgb(78, 201, 176)"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain-text">         </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">Feed</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line code-block-error-line" style="color:#9CDCFE"><span class="token plain-text">         </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">ProgrammingQuotes</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">Modal</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>...Oops. <mark class="error">"Error: Client component can't be async"</mark>. What happened? <code>'use client'</code> makes all of its descendants client components.
But our <code>ProgrammingQuotes</code> assumes it is a server component.
I see three options for how to solve it with current Next.js abilities.</p>
<p>a. <strong>Use client-side</strong> data fetching solutions like <code>tanstack-query</code>, <code>useSWC</code>, or the new <code>use</code> React API. This means giving up on RSC and its performance benefits.</p>
<p>b. <strong>Lift fetch up</strong> into a first server ancestor. It is not enough to lift quotes fetching to <code>FeedModal</code>.
We need to go higher and then drill the fetched quote data via props.
The code <strong>Colocation</strong> property is torn apart.</p>
<p>c. <strong>Refactor modules</strong> so <code>ProgrammingQuotes</code> is passed as children to <code>FeedModal</code>.
However, it forces me to compose components in a certain way. It does not obey my needs and therefore breaks the <strong>Arbitrary</strong> boundary property.
Furthermore, I'm forced to expose a children prop. Which breaks the <strong>Encapsulation</strong> property.</p>
<p>All of the options have a negative impact on my work. Either on performance or worse project maintainability.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="2-forced-to-split-a-component">2. Forced to Split a Component<a href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/#2-forced-to-split-a-component" class="hash-link" aria-label="Direct link to 2. Forced to Split a Component" title="Direct link to 2. Forced to Split a Component">​</a></h2>
<p>Imagine a change requirement. A quote is not random but should change every five seconds in the order received from a database.
A way to access some counting state is with <code>setInterval</code> so let's use it.
I would adjust our component like this:</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">ProgrammingQuotes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> quotes </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">fetch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'/quotes'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> index </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useCounter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">5000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag" style="color:rgb(78, 201, 176)">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">quotes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag" style="color:rgb(78, 201, 176)">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useCounter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">delay</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)">// This hook is simplified for brevity</span><span class="token plain"></span><br></span><span class="token-line code-block-error-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> setCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useState</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line code-block-error-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">useEffect</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">setInterval</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">setCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">count </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> delay</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> count</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>...Oops. <mark class="error">"Error: Server component can't use 'useState' and 'useEffect' hooks"</mark>.
Since server components can't react to time changes (in other words, they can't reactively connect to time state), we need to use a client component.
So maybe add <code>"use client"</code> to the top of the file?
...Oops. <mark class="error">"Error: Client component can't be async"</mark>. What do we do?
I see the following options:</p>
<p>a. <strong>Use client-side fetching</strong>, but as stated above, we give up on <abbr title="React Server Components">RSC</abbr> and their performance.</p>
<p>b. <strong>Lift fetch up</strong>, but as stated, it breaks the code <strong>Colocation</strong>.</p>
<p>c. <strong>Split the component</strong> into a server parent and a client child. The parent is async with <code>fetch</code>, and the child uses <code>useCounter</code>. However, we are actually forced to put them into separate file modules.
So we end up with dislocated code. <strong>Colocation</strong> is broken anyway.</p>
<p>Again, I have no good choice. I have to sacrifice.
At this point, let me remind you of a talk about the importance of colocation
by Dan Abramov in his <a href="https://www.youtube.com/watch?v=dpw9EHDh2bM&amp;t=2600s" target="_blank" rel="noopener noreferrer">Introduction of hooks (YouTube)</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="3-forced-to-prop-drilling">3. Forced to Prop Drilling<a href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/#3-forced-to-prop-drilling" class="hash-link" aria-label="Direct link to 3. Forced to Prop Drilling" title="Direct link to 3. Forced to Prop Drilling">​</a></h2>
<p>Imagine a change requirement. We want to add quotes filtered by author. The author is placed in the URL query param, so it can be shared, and only quotes of such author appear.
After the previous example, we end up with two components.</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">ProgrammingQuotesServer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)">// Here I want to connect to the URL query param state</span><span class="token plain"></span><br></span><span class="token-line code-block-error-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> author </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useSearchParam</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'author'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> quotes </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">fetch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token template-string template-punctuation string" style="color:rgb(206, 145, 120)">`</span><span class="token template-string string" style="color:rgb(206, 145, 120)">/quotes?author=</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(212, 212, 212)">${</span><span class="token template-string interpolation">author</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token template-string template-punctuation string" style="color:rgb(206, 145, 120)">`</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">ProgrammingQuotesClient</span><span class="token tag" style="color:rgb(78, 201, 176)"> </span><span class="token tag attr-name" style="color:rgb(156, 220, 254)">quotes</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(212, 212, 212)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token tag script language-javascript" style="color:rgb(78, 201, 176)">quotes</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token string" style="color:rgb(206, 145, 120)">'use client'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">ProgrammingQuotesClient</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> quotes </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> index </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useCounter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">5000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag" style="color:rgb(78, 201, 176)">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">quotes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag" style="color:rgb(78, 201, 176)">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://nextjs.org/docs/app/api-reference/functions/use-search-params#server-components" target="_blank" rel="noopener noreferrer">Next.js docs</a>
suggest <code>useSearchParam</code> hook or <code>searchParams</code> props.</p>
<p>So let's try <code>useSearchParam</code> first.
...Oops. <mark class="error">"Error: Server component can't use 'useSearchParam' hook"</mark>
Okay. <code>searchParams</code> prop will help. ...Oops. This prop is accessible only in the top-level page component.
I see the following options:</p>
<p>a. <strong>Use client-side fetching</strong> means no RSC benefits.</p>
<p>b. <strong>Drill props</strong> down from the top-level page. In large apps with a deep component tree, this is unmaintainable.</p>
<p>c. <strong>Create context</strong> for URL params and then access it with <code>useContext</code> from the server component. Uf, a lot of work for such a basic use-case.
But it's solved, and I can reuse this context for all other URL params and all components, right?</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="4-forced-to-give-up-on-server">4. Forced to Give up on Server<a href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/#4-forced-to-give-up-on-server" class="hash-link" aria-label="Direct link to 4. Forced to Give up on Server" title="Direct link to 4. Forced to Give up on Server">​</a></h2>
<p>Imagine a last change requirement. This little component should be moved to a footer component. The footer is in a page layout component tree.
...Oops. <code>searchParams</code> prop is inaccessible in layouts. What do I do? It's very frustrating, but it seems I need to refactor and convert it to a client component to be able to use <code>useSearchParam</code>.
...Oops. <mark class="error">"Error: Client component can't be async"</mark>.
Am I just being forced to choose between server-side fetching or Next.js layouts feature?</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="summary">Summary<a href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>Those simple examples break most of the defined rules.
The <code>ProgrammingQuotes</code> component can't be easily reused in a modal or footer.
Its code is dislocated into several modules.
The author search query is inaccessible from the component itself.
I'm forced to expose children as a component prop
and create artificial Client and Server components.</p>
<p>I want to emphasize that these examples are not some edge-case nonsense. Similar requirements come up every day.
I'm 100% sure that at least one example has happened to every developer who creates some non-trivial app in the Next.js App router.
I truly believe Colocation, Encapsulation, and Arbitrary composition are crucial properties for efficient development.
They are necessary for team cooperation and maintaining mid-large codebases.
Especially for long-term projects with many change requirements over the years where many developers read and manipulate the code and need to quickly understand what is happening.
That's the reason I'm writing this. So we can design better framework APIs.</p>
<p>Many of you argue that I can use the old client-side approach and then gradually move to the server.
Start with a full client-side app and if performance is needed, push the client boundary down through a component tree.
You are smart.
I see three catches. 1. this is not recommended nor mentioned by the Next.js team. 2. <abbr title="In My Opinion">IMO</abbr> is too much work.
Both, writing but more importantly mental.
It is not just putting <code>'use client'</code> at the top of the module, but also modifying async code, using different methods to access URLs, refactor component boundaries and more.
3. I believe there is a way to provide better out-of-the-box performance without compromising on DX.
And still keep the ability to achieve the same performance as current Next.js with an easier optimization path.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="a-better-approach">A Better Approach<a href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/#a-better-approach" class="hash-link" aria-label="Direct link to A Better Approach" title="Direct link to A Better Approach">​</a></h2>
<p>In Next.js implementation of RSC, we define if a component is server or client at the module level.
If the compiler sees <code>'use client'</code>, the code is bundled and shipped to the client. It stays server-only otherwise.
In other words, we are choosing where a component is rendered, respectively its runtime environment.
This component runtime then limits its capabilities, e.g., using async fetching or client state.</p>
<p>The last example with layouts limits component capabilities based on a module too.
If the compiler sees a file named <code>layout.tsx</code>, its components are considered "more static".
Some more dynamic state like search params can't be used.</p>
<p>I believe <mark>component capabilities should never be limited by a module-level configuration</mark>.
Any component must be capable of using any feature. <mark>Where rendered and when re-rendered should be deduced automatically</mark>
by features used within the component.</p>
<p>Both runtime environment and re-rendering frequency are unrelated to my business goals.
Ideally, it is an implementation detail and a framework should shield me from it.
The best-performing strategy should be chosen by the framework automatically.
It is the same as how re-rendering works on the client nowadays. Developers use some state within a component, and it re-renders when the state changes.
No manual tweaking of shouldComponentUpdate. The same applies to signals.</p>
<p>Paradoxically, Next.js inspired me with this idea.
It chooses between build and request-time rendering based on <a href="https://nextjs.org/docs/app/building-your-application/rendering/server-components#dynamic-functions" target="_blank" rel="noopener noreferrer">Dynamic functions</a>
used within the component.
For <a href="https://nextjs.org/docs/app/api-reference/file-conventions/layout#layouts-do-not-receive-searchparams" target="_blank" rel="noopener noreferrer">some reason</a>, they limit this deduction in layouts.
I believe this automatic deduction concept should be used more broadly.</p>
<p><img decoding="async" loading="lazy" alt="Components runtime environment rendering diagram" src="https://ondrejvelisek.github.io/assets/images/rendering-runtime-b80dd32377a2dd069b774c13fe0a6880.png" width="2480" height="1080" class="img_jf__">
</p><p style="text-align:center"><em>Components go through runtimes and if some state is needed, they re-render. Pass the runtime otherwise.</em></p><p></p>
<p>In the end, let's think together about this algorithm of automatic runtime environment deduction.
First of all, what environments do we have available, respectively where could the component be rendered?
For sure on a client in a browser. Also on a server. We should distinguish between static rendering during build and dynamic rendering during server request.
There are more flavors, like edge runtime or <abbr title="Deferred Static Generation">DSG</abbr>, but let's stick with just those three for now.
Let's sort them by performance. For most cases, it is like this: Build, Server, Client.
I want to choose the most performant automatically if nothing forces me otherwise.</p>
<p>What forces a component to use a less performant runtime? It is when a component needs some more dynamic or interactive features, respectively connects to some kind of dynamic or interactive state.
When a component connects to <code>searchParam</code>, <code>cookie</code>, or <code>headers</code>, those states are not known during build-time and it must be rendered during server request.
This is what Next.js does with dynamic functions I mentioned above.
Similarly, when a component connects to <code>useState</code>, <code>setInterval</code>, or <code>onMouseEnter</code>, it must be rendered on the client because those states are not accessible on the server.</p>
<p>I hope your head is screaming now "But Ondrej, it would not work! Bundling is a compile-time feature!".
If so, I've done a good job explaining my thoughts. Congratulations. You understand the concept correctly.
There are many questions to be answered.
What if a callback function is passed to a component as a prop?
Are there situations a component is rendered in multiple runtimes?
Many details are unresolved. But let's stop here.</p>
<p>I plan to write a following article where I dive into the API of a new fictional framework and also touch some implementation possibilities.
Until then, I invite you to think about its DX benefits and how you would implement it. Try to think how and not why can't.
And let me know what you think.</p>
<p>Thanks for reading.</p>
<!-- -->
<div class="flex gap-2 w-full flex-wrap my-8"><a href="https://x.com/search?q=https%3A%2F%2Fondrejvelisek.github.io%2Fhow-nextjs-breaks-react-fundamentals%2F" class="hover:no-underline px-4 py-3 border-solid border rounded border-zinc-700 text-white">Discuss on <svg aria-hidden="true" focusable="false" data-prefix="fab" data-icon="x-twitter" class="svg-inline--fa fa-x-twitter" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"></path></svg></a><a href="https://www.reddit.com/r/nextjs/comments/1bipvwe/how_nextjs_breaks_react_fundamentals_with_examples/" class="hover:no-underline px-4 py-3 border-solid border rounded border-zinc-700 text-white">Discuss on <svg aria-hidden="true" focusable="false" data-prefix="fab" data-icon="reddit-alien" class="svg-inline--fa fa-reddit-alien" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M373 138.6c-25.2 0-46.3-17.5-51.9-41l0 0c-30.6 4.3-54.2 30.7-54.2 62.4l0 .2c47.4 1.8 90.6 15.1 124.9 36.3c12.6-9.7 28.4-15.5 45.5-15.5c41.3 0 74.7 33.4 74.7 74.7c0 29.8-17.4 55.5-42.7 67.5c-2.4 86.8-97 156.6-213.2 156.6S45.5 410.1 43 323.4C17.6 311.5 0 285.7 0 255.7c0-41.3 33.4-74.7 74.7-74.7c17.2 0 33 5.8 45.7 15.6c34-21.1 76.8-34.4 123.7-36.4l0-.3c0-44.3 33.7-80.9 76.8-85.5C325.8 50.2 347.2 32 373 32c29.4 0 53.3 23.9 53.3 53.3s-23.9 53.3-53.3 53.3zM157.5 255.3c-20.9 0-38.9 20.8-40.2 47.9s17.1 38.1 38 38.1s36.6-9.8 37.8-36.9s-14.7-49.1-35.7-49.1zM395 303.1c-1.2-27.1-19.2-47.9-40.2-47.9s-36.9 22-35.7 49.1c1.2 27.1 16.9 36.9 37.8 36.9s39.3-11 38-38.1zm-60.1 70.8c1.5-3.6-1-7.7-4.9-8.1c-23-2.3-47.9-3.6-73.8-3.6s-50.8 1.3-73.8 3.6c-3.9 .4-6.4 4.5-4.9 8.1c12.9 30.8 43.3 52.4 78.7 52.4s65.8-21.6 78.7-52.4z"></path></svg></a><a href="https://dev.to/ondrejvelisek/how-nextjs-breaks-react-fundamentals-with-examples-2lof" class="hover:no-underline px-4 py-3 border-solid border rounded border-zinc-700 text-white">Discuss on <svg aria-hidden="true" focusable="false" data-prefix="fab" data-icon="dev" class="svg-inline--fa fa-dev" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M120.12 208.29c-3.88-2.9-7.77-4.35-11.65-4.35H91.03v104.47h17.45c3.88 0 7.77-1.45 11.65-4.35 3.88-2.9 5.82-7.25 5.82-13.06v-69.65c-.01-5.8-1.96-10.16-5.83-13.06zM404.1 32H43.9C19.7 32 .06 51.59 0 75.8v360.4C.06 460.41 19.7 480 43.9 480h360.2c24.21 0 43.84-19.59 43.9-43.8V75.8c-.06-24.21-19.7-43.8-43.9-43.8zM154.2 291.19c0 18.81-11.61 47.31-48.36 47.25h-46.4V172.98h47.38c35.44 0 47.36 28.46 47.37 47.28l.01 70.93zm100.68-88.66H201.6v38.42h32.57v29.57H201.6v38.41h53.29v29.57h-62.18c-11.16.29-20.44-8.53-20.72-19.69V193.7c-.27-11.15 8.56-20.41 19.71-20.69h63.19l-.01 29.52zm103.64 115.29c-13.2 30.75-36.85 24.63-47.44 0l-38.53-144.8h32.57l29.71 113.72 29.57-113.72h32.58l-38.46 144.8z"></path></svg></a></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Conceptual Model of React and RSC]]></title>
        <id>https://ondrejvelisek.github.io/conceptual-model-of-react-and-rsc/</id>
        <link href="https://ondrejvelisek.github.io/conceptual-model-of-react-and-rsc/"/>
        <updated>2024-03-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Building web apps is a complex problem. We need simple high-level mental structures to support such a heavy load.]]></summary>
        <content type="html"><![CDATA[<p>Building web apps is a complex problem. We need simple high-level mental structures to support such a heavy load.
These structures allow us to offload unnecessary details from our brains, so we can focus on the important parts of our code.
<code>UI = f(state)</code> is one of them. Every one of us knows this formula. But do you know what it reflects in the real world?
What is <code>UI</code>? What is <code>state</code>? What the f* is <em><code>f</code></em>? And how is it affected by RSC (React Server Components)? Here is my view.</p>
<!-- -->
<p><img decoding="async" loading="lazy" alt="Holistic state philosophy" src="https://ondrejvelisek.github.io/assets/images/holistic-state-562930c5eec9df368ea3c02de81cc2b3.png" width="1791" height="820" class="img_jf__"></p>
<p>Initial clarifications:</p>
<ul>
<li>I reckon the state mutates, but I ignore how it is mutated.</li>
<li>I show examples of React, but most of the following applies to other UI frameworks like Angular, Vue, Svelte, Qwik, or Solid.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="what-is-state">What is <code>state</code>?<a href="https://ondrejvelisek.github.io/conceptual-model-of-react-and-rsc/#what-is-state" class="hash-link" aria-label="Direct link to what-is-state" title="Direct link to what-is-state">​</a></h2>
<p>Let's reconsider: <code>UI = f(state)</code>. In other words, <code>state</code> is what our <code>UI</code> depends on. If a dependency changes, we want to change the <code>UI</code>. This phenomenon is called <strong>reactivity</strong>.</p>
<p>I believe that state encompasses more than just in-memory local component state (<code>useState</code>) or in-memory global app state (Redux, Jotai, Zustand).
I'm not alone (
<a href="https://tkdodo.eu/blog/react-query-as-a-state-manager" target="_blank" rel="noopener noreferrer">TkDodo</a>,
<a href="https://www.youtube.com/watch?v=ukpgxEemXsk" target="_blank" rel="noopener noreferrer">ByteGrad (YouTube)</a>,
<a href="https://x.com/kentcdodds/status/1349173470567964673" target="_blank" rel="noopener noreferrer">Kent C. Dodds</a>,
<a href="https://daverupert.com/2024/02/ui-states/" target="_blank" rel="noopener noreferrer">Dave Rupert</a>,
<a href="https://overreacted.io/the-two-reacts/" target="_blank" rel="noopener noreferrer">Dan Abramov</a>
). Many developers agree that at least the URL and server data constitute some kind of state too. But I believe it has a much wider scope.</p>
<p>Let's consider some <code>UI</code> examples:</p>
<ul>
<li>Blog post UI depends on the slug present in the <strong>URL</strong> address.</li>
<li>Server files explorer UI depends on <strong>server</strong> files.</li>
<li>The newest movies list UI relies on the <strong>third-party</strong> resource of OMDB.</li>
<li>Ticking clock UI depends on <strong>time</strong>.</li>
<li>Drawing canvas UI relies on the mouse position of the user's <strong>input device</strong>.</li>
<li>User profile UI depends on the session token stored in a <strong>cookie</strong>.</li>
<li>The "Keep me signed in on this device" UI depends on a flag in <strong>local storage</strong>.</li>
<li>OS preferred dark mode UI depends on the <strong>OS setting</strong>.</li>
<li>Devtools debug UI depends on an <strong>env variable</strong>.</li>
<li>Panoramic background UI depends on the scroll position of a <strong>DOM</strong> element.</li>
<li>... Got the idea?</li>
</ul>
<p>I refer to these states as <strong>source states</strong>. It's important to note that a state may be <em>derived</em>. For example:</p>
<ul>
<li>The current post <em>slug</em> depends on the <strong>URL</strong>.</li>
<li>The current post <em>minutes read</em> depends on the <em>slug</em> and <strong>server files</strong>.</li>
<li>The current <em>user role</em> depends on authorization data in the <strong>server database</strong> and the session token from the <strong>cookie</strong>.</li>
<li>The <em>preferred dark mode</em> depends on <strong>local storage</strong> and the <strong>OS setting</strong> (storage as user preference and OS as default).</li>
<li>The minutes value in a pausable stopwatch depends on <strong>time</strong> and the spacebar <strong>pressed key</strong>.</li>
<li>... Ok. You got it.</li>
</ul>
<p>Derived state depends on another state and should change when its dependencies change. In other words, it should be reactive. You can find a great deep-dive into this topic on <a href="https://reacttraining.com/blog/derived-state" target="_blank" rel="noopener noreferrer">React Training - Derived State</a>.</p>
<p>The boundary between <strong>source</strong> and <em>derived</em> states is blurry. For example, the server database, local storage, OS settings, all of those depend on file system data.
But let's mark state as "source" when it depends solely on states inaccessible by available technologies. For example, I can't access some private browser file with local storage data from the browser window environment.</p>
<p>I would like to be explicit and distinguish between in-memory state and all those kinds of states.
For myself, I name it a <strong>Holistic state</strong>.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="what-is-ui">What is <code>UI</code>?<a href="https://ondrejvelisek.github.io/conceptual-model-of-react-and-rsc/#what-is-ui" class="hash-link" aria-label="Direct link to what-is-ui" title="Direct link to what-is-ui">​</a></h2>
<p>It is what users perceive with their senses, usually with their eyes on the screen. On the web, it is represented with the <strong>DOM</strong>.</p>
<p>The wilderness out there is more diverse.
Our user might be a machine like a search indexing bot, but they also work on DOM elements and attributes.
There could be assistive technologies like a screen reader, working on the DOM as well.
A very important piece of UI is the URL in the browser address bar. Since it is always in sync with the URL state, I like to think about it as a source state rather than UI.
Users also perceive playing sounds, haptic vibration feedback, flashlight, etc.
Let's simplify and stick with DOM only. It's worth mentioning that the following applies to other UI pieces similarly.</p>
<p>As a developer, I expect the framework to provide tools to describe UI and update the DOM when the description changes.
In React and Vue, those tools are JSX and VDOM. In Solid, it is a signal dependency graph.</p>
<p>Note: I classified DOM as both UI and source state. If we use DOM as a source state and let our UI depend on it, we create a cyclic dependency.
Sometimes it is necessary, e.g., when measuring text width. Be careful in such situations to not create infinite loops. The same applies to the URL.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="what-the-f-is-f">What the f* is <em><code>f</code></em>?<a href="https://ondrejvelisek.github.io/conceptual-model-of-react-and-rsc/#what-the-f-is-f" class="hash-link" aria-label="Direct link to what-the-f-is-f" title="Direct link to what-the-f-is-f">​</a></h2>
<p><em><code>f</code></em> is something that connects <code>state</code> and <code>UI</code>.
You may say it is the component tree with its render function. And you are <abbr title="In My Opinion">IMO</abbr> partially right.</p>
<p>Because this <em><code>f</code></em> function usually produces many UI pieces,
it is a "necessity" to split the mental load into reusable smaller <code>f</code>s - components.
<a href="https://overreacted.io/a-chain-reaction/" target="_blank" rel="noopener noreferrer">Dan Abramov</a> wrote a great article about it.</p>
<p>React component ergonomics example:</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">Post</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">slug</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">                  </span><span class="token comment" style="color:rgb(106, 153, 85)">// name and state received via props</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> posts </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useQuery</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">fetchPosts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)">// state received via hook</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> post </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> posts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">slug</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain">           </span><span class="token comment" style="color:rgb(106, 153, 85)">// derivation logic</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag" style="color:rgb(78, 201, 176)">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">post</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag" style="color:rgb(78, 201, 176)">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain">           </span><span class="token comment" style="color:rgb(106, 153, 85)">// JSX UI description</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Name</strong> of the function to be referenceable.</li>
<li><strong>Receive state</strong> via props or hooks (or higher-order components).</li>
<li><strong>Derive state</strong> before JSX is produced. Right within the render function or separated into a custom function.</li>
<li><strong>Produce UI description</strong> in the form of JSX which is then consumed by VDOM.</li>
</ul>
<p>I said partially. Components do not (usually) directly connect to states. They just receive a value/connection.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="connecting-states">Connecting States<a href="https://ondrejvelisek.github.io/conceptual-model-of-react-and-rsc/#connecting-states" class="hash-link" aria-label="Direct link to Connecting States" title="Direct link to Connecting States">​</a></h2>
<p>We need a way to choose the states upon which our component depends. We want to subscribe/observe changes and execute derivation and rendering logic with new values.</p>
<p>Hooks do an excellent job with their smart <code>useEffect</code> and <code>useRef</code>. Much maligned for their ergonomics, but in my opinion, they get the conceptual job right. Let's refer to custom hooks using <code>useEffect</code> and <code>useRef</code> as <strong>connecting hooks</strong>.</p>
<p>React connecting hook ergonomics example:</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">// name and config received via props</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">fucntion </span><span class="token function" style="color:rgb(220, 220, 170)">useStopwatch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">delay</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">          </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">ticks</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> setTicks</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useState</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">useEffect</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">         </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)">// subscribing to real world state (time)            </span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> timer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">setInterval</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">setTicks</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">prev </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> prev </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> delay</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">clearInterval</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">timer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">delay</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)">// Returning reactive state</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> ticks                          </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Many libraries like <code>tanstack-query</code> for external resources, <code>react-router</code> for URLs, or <code>react-use</code> for various kinds of states have been created. They allow us (app devs) to connect to the source state with just one line of code from within the component. And don't care much about how. Great abstraction.</p>
<p>These connecting hooks are the missing glue between state and component rendering logic. They subscribe to state changes and rerun the necessary derivation and rendering logic accordingly.</p>
<p>In my opinion, the observer pattern is best for developer experience (DX). But sometimes it is not possible or desired, usually for performance reasons. Typically, this is the case for states far away from the client, like server data. Even for them, we have mechanisms like websockets or long polling. But usually, we fall back to the initial fetch during either component mount, server request, or build. Then caching, invalidation, and optimistic update mechanisms must come into play. But let's still call them connecting hooks anyway.</p>
<p>There are hooks that create state themselves, like <code>useState</code> and <code>useReducer</code>, and simultaneously connect to it. But let's stick with the word "connecting" only.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="developer-experience">Developer Experience<a href="https://ondrejvelisek.github.io/conceptual-model-of-react-and-rsc/#developer-experience" class="hash-link" aria-label="Direct link to Developer Experience" title="Direct link to Developer Experience">​</a></h2>
<p>So the real-world picture of <code>UI = f(state)</code> for app developers could be condensed into:</p>
<div class="language-js codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-js codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token constant" style="color:rgb(100, 102, 149)">DOM</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">render</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token function" style="color:rgb(220, 220, 170)">derive</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token function" style="color:rgb(220, 220, 170)">connect</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">holistic_state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It is a super simple mental model for such a complex problem as a web app. It is <strong>conceptually clean and mentally relieving</strong>. Modern client-side <abbr title="Single Page Application">SPA</abbr>s follow this conceptual model quite precisely. I believe many devs love React 16.8+ (hooks introduced) because of this mental model, myself included. It speeds up development, saves time, and money.</p>
<p>But for the model to be helpful, some additional properties must be met:</p>
<ol>
<li>
<p><strong>Composable</strong> - Ability to compose components into the full UI.<br>
Ability to <mark>place any component into any other component</mark>.</p>
</li>
<li>
<p><strong>Reusable</strong> - Ability to define a name and reuse a component in a different place.<br>
Also, the ability to pass arbitrary configuration (possibly reactive state) to adjust its behavior (props).</p>
</li>
<li>
<p><strong>Colocated</strong> - Name, render logic, necessary state connections, state derivation logic, documentation, etc.<br>
Devs should be able to <mark>place all those dependencies inside a component</mark>.<br>
If not, devs jump back and forth in a codebase. Inconvenient.</p>
</li>
<li>
<p><strong>Encapsulated</strong> - Ability to work on a component independently by default. Opt-in to break the barrier.<br>
If not met, devs must mentally think about other code pieces.
Note: this is broken by React cascading memoization. Frustrating.</p>
</li>
<li>
<p><strong>Reactive</strong> - Component must react to connected state the dev chooses.<br>
<mark>Any component must be able to connect to any state</mark>. The same applies for derivation hooks.<br>
If some rules are required, it makes development jammed.</p>
</li>
<li>
<p><strong>Arbitrary</strong> - The component's boundaries must obey the dev's needs.<br>
<mark>Nothing must force a component to split (or not to split)</mark>.<br>
Same for derivation hooks. It destroys their purpose otherwise.</p>
</li>
</ol>
<p>Why does all of this matter? Because the conceptual model needs to be solid. All the time. If we develop some complex logic with those principles in mind, it can't happen due to broken principles that we need to refactor. I want to trust it will support me during heavy loads.</p>
<p>I can handle some configuration and syntax overhead like useEffect, CSS integration, or Webpack. I'm fine to write a few extra chars if the conceptual model stays clear.</p>
<p>I know React client <abbr title="Single Page Application">SPA</abbr>s suffer from bad performance. I believe that the conceptual model is so important; it should not be broken by enforcing good performance patterns. The framework should remain loyal to the clear model and do its best for performance. In addition, provide tools to optimize like optimization hints, refactoring patterns, or more aggressive caching config.</p>
<p>It seems to me <abbr title="React Server Components">RSC</abbr> and NextJS just <mark>break some fundamental properties of this conceptual model</mark> because of their performance-first design. And I believe it is not necessary to achieve their goals. But let's stop here and keep this for the next article.</p>
<blockquote>
<p>UPDATE: follow-up article <a href="https://ondrejvelisek.github.io/how-nextjs-breaks-react-fundamentals/">How Next.js breaks React Fundamentals (Examples)</a> is out.</p>
</blockquote>
<p>Thanks for reading.</p>
<!-- -->
<div class="flex gap-2 w-full flex-wrap my-8"><a href="https://x.com/search?q=https%3A%2F%2Fondrejvelisek.github.io%2Fconceptual-model-of-react-and-rsc%2F" class="hover:no-underline px-4 py-3 border-solid border rounded border-zinc-700 text-white">Discuss on <svg aria-hidden="true" focusable="false" data-prefix="fab" data-icon="x-twitter" class="svg-inline--fa fa-x-twitter" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"></path></svg></a><a href="https://www.reddit.com/r/reactjs/comments/1b6eowb/conceptual_model_of_react_in_the_rsc_age/" class="hover:no-underline px-4 py-3 border-solid border rounded border-zinc-700 text-white">Discuss on <svg aria-hidden="true" focusable="false" data-prefix="fab" data-icon="reddit-alien" class="svg-inline--fa fa-reddit-alien" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M373 138.6c-25.2 0-46.3-17.5-51.9-41l0 0c-30.6 4.3-54.2 30.7-54.2 62.4l0 .2c47.4 1.8 90.6 15.1 124.9 36.3c12.6-9.7 28.4-15.5 45.5-15.5c41.3 0 74.7 33.4 74.7 74.7c0 29.8-17.4 55.5-42.7 67.5c-2.4 86.8-97 156.6-213.2 156.6S45.5 410.1 43 323.4C17.6 311.5 0 285.7 0 255.7c0-41.3 33.4-74.7 74.7-74.7c17.2 0 33 5.8 45.7 15.6c34-21.1 76.8-34.4 123.7-36.4l0-.3c0-44.3 33.7-80.9 76.8-85.5C325.8 50.2 347.2 32 373 32c29.4 0 53.3 23.9 53.3 53.3s-23.9 53.3-53.3 53.3zM157.5 255.3c-20.9 0-38.9 20.8-40.2 47.9s17.1 38.1 38 38.1s36.6-9.8 37.8-36.9s-14.7-49.1-35.7-49.1zM395 303.1c-1.2-27.1-19.2-47.9-40.2-47.9s-36.9 22-35.7 49.1c1.2 27.1 16.9 36.9 37.8 36.9s39.3-11 38-38.1zm-60.1 70.8c1.5-3.6-1-7.7-4.9-8.1c-23-2.3-47.9-3.6-73.8-3.6s-50.8 1.3-73.8 3.6c-3.9 .4-6.4 4.5-4.9 8.1c12.9 30.8 43.3 52.4 78.7 52.4s65.8-21.6 78.7-52.4z"></path></svg></a><a href="https://dev.to/ondrejvelisek/conceptual-model-of-react-in-the-rsc-age-5bn5" class="hover:no-underline px-4 py-3 border-solid border rounded border-zinc-700 text-white">Discuss on <svg aria-hidden="true" focusable="false" data-prefix="fab" data-icon="dev" class="svg-inline--fa fa-dev" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M120.12 208.29c-3.88-2.9-7.77-4.35-11.65-4.35H91.03v104.47h17.45c3.88 0 7.77-1.45 11.65-4.35 3.88-2.9 5.82-7.25 5.82-13.06v-69.65c-.01-5.8-1.96-10.16-5.83-13.06zM404.1 32H43.9C19.7 32 .06 51.59 0 75.8v360.4C.06 460.41 19.7 480 43.9 480h360.2c24.21 0 43.84-19.59 43.9-43.8V75.8c-.06-24.21-19.7-43.8-43.9-43.8zM154.2 291.19c0 18.81-11.61 47.31-48.36 47.25h-46.4V172.98h47.38c35.44 0 47.36 28.46 47.37 47.28l.01 70.93zm100.68-88.66H201.6v38.42h32.57v29.57H201.6v38.41h53.29v29.57h-62.18c-11.16.29-20.44-8.53-20.72-19.69V193.7c-.27-11.15 8.56-20.41 19.71-20.69h63.19l-.01 29.52zm103.64 115.29c-13.2 30.75-36.85 24.63-47.44 0l-38.53-144.8h32.57l29.71 113.72 29.57-113.72h32.58l-38.46 144.8z"></path></svg></a></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Practical limits of React hooks - Recursion]]></title>
        <id>https://ondrejvelisek.github.io/practical-limits-of-react-hooks-recursion/</id>
        <link href="https://ondrejvelisek.github.io/practical-limits-of-react-hooks-recursion/"/>
        <updated>2022-03-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[While ago, I started using React hooks. The simplicity, homogenity and composability sounded great.]]></summary>
        <content type="html"><![CDATA[<p>While ago, I started using React hooks. The simplicity, homogenity and composability sounded great.
Both components and hooks are simple functions. I can easily react on state changes from memory,
local storage, location URL and server the same way - with hooks. Mental model stays simple.
My app is just a big function which consumes state and produces DOM. This big function is composed
of a smaller functions which are composed of smaller functions and so on. But there were obstacles
I've started to encounter and in the end I hit the hard limit of React hooks.</p>
<!-- -->
<blockquote>
<p>UPDATE 2024: new React <a href="https://react.dev/reference/react/use" target="_blank" rel="noopener noreferrer"><code>use</code></a> hook may finally solve following limitation
(if you accept <code>&lt;Suspense/&gt;</code> as a good pattern)</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="model-app">Model app<a href="https://ondrejvelisek.github.io/practical-limits-of-react-hooks-recursion/#model-app" class="hash-link" aria-label="Direct link to Model app" title="Direct link to Model app">​</a></h2>
<p>Each app has some data model defined with entities and relations between them. Lets say we have company
Department and Employee where department consists of other departments and/or direct employees.
One employee can directly work for exactly one department. Cycles in department hierarchy are prohibited.</p>
<p>Our Backend implements REST endpoints.</p>
<div class="language-code codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockTitle_bP0a">/departments</div><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-code codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token plain">returns list of all department ids</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-code codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockTitle_bP0a">/departments/:departmentId</div><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-code codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token plain">returns list of sub-department ids</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">and list of direct employee ids</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There are three product requirements.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="pleasant-walk-with-basic-hooks">Pleasant walk with basic hooks<a href="https://ondrejvelisek.github.io/practical-limits-of-react-hooks-recursion/#pleasant-walk-with-basic-hooks" class="hash-link" aria-label="Direct link to Pleasant walk with basic hooks" title="Direct link to Pleasant walk with basic hooks">​</a></h2>
<p>First product requirement is simple. User selects a department and wants to see number of direct employees.
Pfff, its simple. Just implement this custom hook which uses department REST endpoint and use it in a component.</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    departmentId</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">number</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">useDirectEmployeeIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">length</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDirectEmployeeIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    departmentId</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token builtin" style="color:rgb(86, 156, 214)">string</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">useDepartment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">directEmployeeIds</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDepartment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    departmentId</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token maybe-class-name">Department</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">useQuery</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'departments'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> departmentId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">fetch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token template-string template-punctuation string" style="color:rgb(206, 145, 120)">`</span><span class="token template-string string" style="color:rgb(206, 145, 120)">/departments/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(212, 212, 212)">${</span><span class="token template-string interpolation">departmentId</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token template-string template-punctuation string" style="color:rgb(206, 145, 120)">`</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">data</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Our backend implements exactly this endpoints so we use <code>react-query</code> and we are done.
There are some loading and error states which I omitted, we can use fancy Suspend and ErrorBoundary,
but we understand the code.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="obstacles-with-looping">Obstacles with looping<a href="https://ondrejvelisek.github.io/practical-limits-of-react-hooks-recursion/#obstacles-with-looping" class="hash-link" aria-label="Direct link to Obstacles with looping" title="Direct link to Obstacles with looping">​</a></h2>
<p>Second product requirement is simple. User needs to select multiple departments and see sum of direct employees.
Ok, simple. I already have code for one. So simply loop it over multiple selected departments and sum the result.</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> totalCount </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">sum</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    departmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">map</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        departmentId </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wait! It is a hook and there are rule of hooks. Anoying but still doable.
Lets reimplement <code>useDirectEmployeeCount</code> to support multiple department ids.
Then I can sum them like this.</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> departmentCounts </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> totalCount </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">sum</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentCounts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    departmentIds</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token builtin" style="color:rgb(86, 156, 214)">string</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token builtin" style="color:rgb(86, 156, 214)">number</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">useDirectEmployeeIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">map</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">employeeIds </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> employeeIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>But wait! I need to reimplement <code>useDirectEmployeeIds</code> too. Very anoying.</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDirectEmployeeIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    departmentIds</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token builtin" style="color:rgb(86, 156, 214)">string</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token builtin" style="color:rgb(86, 156, 214)">string</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">useDepartment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">map</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">department </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> department</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">directEmployeeIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>But wait! Grrr...</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDepartment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    departmentIds</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token builtin" style="color:rgb(86, 156, 214)">string</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token maybe-class-name">Department</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">useQueries</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">map</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentId </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        queryKey</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'departments'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> departmentId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token function-variable function" style="color:rgb(220, 220, 170)">queryFn</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">fetch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token template-string template-punctuation string" style="color:rgb(206, 145, 120)">`</span><span class="token template-string string" style="color:rgb(206, 145, 120)">/departments/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(212, 212, 212)">${</span><span class="token template-string interpolation">departmentId</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token template-string template-punctuation string" style="color:rgb(206, 145, 120)">`</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">map</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">result </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> result</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Uf. Done. I'm glad it is a small project with just three hooks. Tell me the last requirement.</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="limits-with-recursion">Limits with recursion<a href="https://ondrejvelisek.github.io/practical-limits-of-react-hooks-recursion/#limits-with-recursion" class="hash-link" aria-label="Direct link to Limits with recursion" title="Direct link to Limits with recursion">​</a></h2>
<p>Third and last product requirement is simple. User needs to select department and see sum of direct and
indirect employees (including employees from all sub-departments and their sub-departments and so on).
Ok, simple. I already have code for multiple departments. So simply recursively call it and sum the result.</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useIndirectEmployeeCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    departmentIds</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token builtin" style="color:rgb(86, 156, 214)">string</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token builtin" style="color:rgb(86, 156, 214)">number</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> directCount </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> departments </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDepartment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> subDepartmentIds </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> departments</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">flatMap</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">department </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> department</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">subDepartmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> indirectCount </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useIndirectEmployeeCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">subDepartmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> directCount </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> indirectCount</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wait.</p>
<blockquote>
<mark class="error">Error: Maximum Call Stack Size Exceeded</mark>
</blockquote>
<p>Oh. You almost got me. I just forgot a recursive break, right?</p>
<div class="language-tsx codeBlockContainer_t37y theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#212432"><div class="codeBlockContent_evnz"><pre tabindex="0" class="prism-code language-tsx codeBlock_eucs thin-scrollbar" style="color:#9CDCFE;background-color:#212432"><code class="codeBlockLines_ir7E"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useIndirectEmployeeCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    departmentIds</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token builtin" style="color:rgb(86, 156, 214)">string</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Array</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token builtin" style="color:rgb(86, 156, 214)">number</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> directCount </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDirectEmployeeCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> departments </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useDepartment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">departmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> subDepartmentIds </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> departments</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">flatMap</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">department </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> department</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">subDepartmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">subDepartmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">===</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> directCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">const</span><span class="token plain"> indirectCount </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">useIndirectEmployeeCount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">subDepartmentIds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> directCount </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> indirectCount</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup_WgNt"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Grdj" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_cxvn"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_I15G"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wait.</p>
<blockquote>
<mark class="error">Error: React Hook "useIndirectEmployeeCount" is called conditionally.</mark>
</blockquote>
<p>...</p>
<h2 class="anchor anchorWithStickyNavbar_BFL_" id="last-words">Last words<a href="https://ondrejvelisek.github.io/practical-limits-of-react-hooks-recursion/#last-words" class="hash-link" aria-label="Direct link to Last words" title="Direct link to Last words">​</a></h2>
<p>Mental model stays simple. Everything is a simple function. My app is one big function composed of smaller and
smaller ones. It trully sounds great! But in a real world, hooks are not so simple, homogen and composable.
There are obstacles and limits mainly because of rule of hooks.</p>
<p>This post is not about saying React hooks are bad. I wrote it because I did not find any resources
on such obstacles and limits. The React world looks like hooks are always pleasant walk trought the rosy garden.
But they are not.</p>
<p>For now I don't know how to elegantly solve the recusrion example. Are there some resources on this?
Do you have following thougts? Maybe I'm not the only one struggling.</p>
<p>Thanks for reading.</p>
<!-- -->
<div class="flex gap-2 w-full flex-wrap my-8"><a href="https://x.com/search?q=https%3A%2F%2Fondrejvelisek.github.io%2Fpractical-limits-of-react-hooks-recursion%2F" class="hover:no-underline px-4 py-3 border-solid border rounded border-zinc-700 text-white">Discuss on <svg aria-hidden="true" focusable="false" data-prefix="fab" data-icon="x-twitter" class="svg-inline--fa fa-x-twitter" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"></path></svg></a><a href="https://www.reddit.com/r/reactjs/comments/tkog71/practical_limits_of_react_hooks_recursion/" class="hover:no-underline px-4 py-3 border-solid border rounded border-zinc-700 text-white">Discuss on <svg aria-hidden="true" focusable="false" data-prefix="fab" data-icon="reddit-alien" class="svg-inline--fa fa-reddit-alien" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M373 138.6c-25.2 0-46.3-17.5-51.9-41l0 0c-30.6 4.3-54.2 30.7-54.2 62.4l0 .2c47.4 1.8 90.6 15.1 124.9 36.3c12.6-9.7 28.4-15.5 45.5-15.5c41.3 0 74.7 33.4 74.7 74.7c0 29.8-17.4 55.5-42.7 67.5c-2.4 86.8-97 156.6-213.2 156.6S45.5 410.1 43 323.4C17.6 311.5 0 285.7 0 255.7c0-41.3 33.4-74.7 74.7-74.7c17.2 0 33 5.8 45.7 15.6c34-21.1 76.8-34.4 123.7-36.4l0-.3c0-44.3 33.7-80.9 76.8-85.5C325.8 50.2 347.2 32 373 32c29.4 0 53.3 23.9 53.3 53.3s-23.9 53.3-53.3 53.3zM157.5 255.3c-20.9 0-38.9 20.8-40.2 47.9s17.1 38.1 38 38.1s36.6-9.8 37.8-36.9s-14.7-49.1-35.7-49.1zM395 303.1c-1.2-27.1-19.2-47.9-40.2-47.9s-36.9 22-35.7 49.1c1.2 27.1 16.9 36.9 37.8 36.9s39.3-11 38-38.1zm-60.1 70.8c1.5-3.6-1-7.7-4.9-8.1c-23-2.3-47.9-3.6-73.8-3.6s-50.8 1.3-73.8 3.6c-3.9 .4-6.4 4.5-4.9 8.1c12.9 30.8 43.3 52.4 78.7 52.4s65.8-21.6 78.7-52.4z"></path></svg></a><a href="https://dev.to/ondrejvelisek/practical-limits-of-react-hooks-recursion-555" class="hover:no-underline px-4 py-3 border-solid border rounded border-zinc-700 text-white">Discuss on <svg aria-hidden="true" focusable="false" data-prefix="fab" data-icon="dev" class="svg-inline--fa fa-dev" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M120.12 208.29c-3.88-2.9-7.77-4.35-11.65-4.35H91.03v104.47h17.45c3.88 0 7.77-1.45 11.65-4.35 3.88-2.9 5.82-7.25 5.82-13.06v-69.65c-.01-5.8-1.96-10.16-5.83-13.06zM404.1 32H43.9C19.7 32 .06 51.59 0 75.8v360.4C.06 460.41 19.7 480 43.9 480h360.2c24.21 0 43.84-19.59 43.9-43.8V75.8c-.06-24.21-19.7-43.8-43.9-43.8zM154.2 291.19c0 18.81-11.61 47.31-48.36 47.25h-46.4V172.98h47.38c35.44 0 47.36 28.46 47.37 47.28l.01 70.93zm100.68-88.66H201.6v38.42h32.57v29.57H201.6v38.41h53.29v29.57h-62.18c-11.16.29-20.44-8.53-20.72-19.69V193.7c-.27-11.15 8.56-20.41 19.71-20.69h63.19l-.01 29.52zm103.64 115.29c-13.2 30.75-36.85 24.63-47.44 0l-38.53-144.8h32.57l29.71 113.72 29.57-113.72h32.58l-38.46 144.8z"></path></svg></a></div>]]></content>
    </entry>
</feed>