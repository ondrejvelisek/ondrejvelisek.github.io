"use strict";(self.webpackChunk_torrta_docs=self.webpackChunk_torrta_docs||[]).push([[952],{1204:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var t=s(7e3),o=s(7472);const i={},r="Great things in hooks but forgotten in RSC",c={permalink:"/2024/02/23/great-things-in-hooks-but-forgotten-in-rsc",source:"@site/blog/2024-02-23-great-things-in-hooks-but-forgotten-in-rsc/index.md",title:"Great things in hooks but forgotten in RSC",description:"UI = f(state). Every one of us knows this formula. But how does it translate to real world?",date:"2024-02-23T00:00:00.000Z",formattedDate:"February 23, 2024",tags:[],readingTime:5.565,hasTruncateMarker:!0,authors:[],frontMatter:{},unlisted:!1,nextItem:{title:"Practical limits of React hooks - Recursion",permalink:"/2022/03/23/practical-limits-of-react-hooks-recursion"}},d={authorsImageUrls:[]},a=[{value:"What is <code>state</code>?",id:"what-is-state",level:2},{value:"What is <code>UI</code>?",id:"what-is-ui",level:2},{value:"What the f* is <em><code>f</code></em>?",id:"what-the-f-is-f",level:2},{value:"Hooks to connect state",id:"hooks-to-connect-state",level:2},{value:"Answer",id:"answer",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"UI = f(state)"}),". Every one of us knows this formula. But how does it translate to real world?\nWhat is ",(0,t.jsx)(n.code,{children:"UI"}),"? What is ",(0,t.jsx)(n.code,{children:"state"}),"? And what the f* is ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.code,{children:"f"})}),"? Here is my view."]}),"\n",(0,t.jsx)(n.p,{children:"I ignore how state is mutated. But I reckon it can mutate."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(3117).c+"",title:"UI is a function of State",width:"1920",height:"960"})}),"\n",(0,t.jsxs)(n.h2,{id:"what-is-state",children:["What is ",(0,t.jsx)(n.code,{children:"state"}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:["Look again: ",(0,t.jsx)(n.code,{children:"UI = f(state)"}),". In other words ",(0,t.jsx)(n.code,{children:"state"})," is what our ",(0,t.jsx)(n.code,{children:"UI"})," depends on. If dependency changes, we want to change the UI. It is called reactivity."]}),"\n",(0,t.jsxs)(n.p,{children:["I believe the ",(0,t.jsx)(n.code,{children:"state"})," is more than just in-memory local component state (",(0,t.jsx)(n.code,{children:"useState"}),") or in-memory global app state (Redux, Jotai, Zustand).\nI'm not alone (\n",(0,t.jsx)(n.a,{href:"https://tkdodo.eu/blog/react-query-as-a-state-manager",children:"TkDodo"}),",\n",(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=ukpgxEemXsk",children:"ByteGrad (YouTube)"}),",\n",(0,t.jsx)(n.a,{href:"https://x.com/kentcdodds/status/1349173470567964673",children:"Kent C. Dodds"}),",\n",(0,t.jsx)(n.a,{href:"https://daverupert.com/2024/02/ui-states/",children:"Dave Rupert"}),",\n",(0,t.jsx)(n.a,{href:"https://overreacted.io/the-two-reacts/",children:"Dan Abramov"}),"\n). Many devs agrees at least URL and server data are some kind of state too. But I think it is much more. Lets place some ",(0,t.jsx)(n.code,{children:"UI"})," examples:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Blog post ",(0,t.jsx)(n.code,{children:"UI"})," depends on slug present in ",(0,t.jsx)(n.em,{children:"URL"})," address."]}),"\n",(0,t.jsxs)(n.li,{children:["Server files ",(0,t.jsx)(n.code,{children:"UI"})," explorer depends on ",(0,t.jsx)(n.em,{children:"server files"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Newest movies list ",(0,t.jsx)(n.code,{children:"UI"})," depends on ",(0,t.jsx)(n.em,{children:"external resource"})," of OMDB."]}),"\n",(0,t.jsxs)(n.li,{children:["Ticking clock ",(0,t.jsx)(n.code,{children:"UI"})," depends on ",(0,t.jsx)(n.em,{children:"time"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Drawing canvas ",(0,t.jsx)(n.code,{children:"UI"})," depends on ",(0,t.jsx)(n.em,{children:"mouse"})," position."]}),"\n",(0,t.jsxs)(n.li,{children:["User profile ",(0,t.jsx)(n.code,{children:"UI"})," depends on session token stored in ",(0,t.jsx)(n.em,{children:"cookie"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Keep me signed on this device ",(0,t.jsx)(n.code,{children:"UI"})," depends on flag in ",(0,t.jsx)(n.em,{children:"local storage"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["OS prefered dark mode ",(0,t.jsx)(n.code,{children:"UI"})," depends on ",(0,t.jsx)(n.em,{children:"OS setting"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Devtools debug ",(0,t.jsx)(n.code,{children:"UI"})," depends on ",(0,t.jsx)(n.em,{children:"env variable"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Panoramatic background ",(0,t.jsx)(n.code,{children:"UI"})," depends on scroll position of ",(0,t.jsx)(n.em,{children:"DOM"})," element."]}),"\n",(0,t.jsx)(n.li,{children:"... OK you got the idea."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Its important to say that ",(0,t.jsx)(n.code,{children:"state"})," may be ",(0,t.jsx)(n.strong,{children:"derived"}),". Examples:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Current post ",(0,t.jsx)(n.em,{children:"slug"})," depends on ",(0,t.jsx)(n.em,{children:"URL"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Current post ",(0,t.jsx)(n.em,{children:"minutes read"})," depends on slug in ",(0,t.jsx)(n.em,{children:"URL"})," and ",(0,t.jsx)(n.em,{children:"server files"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Current ",(0,t.jsx)(n.em,{children:"user role"})," depends on ",(0,t.jsx)(n.em,{children:"server database"})," authorization data and session token stored in ",(0,t.jsx)(n.em,{children:"cookie"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"Prefered dark mode"})," depends on ",(0,t.jsx)(n.em,{children:"local storage"})," and ",(0,t.jsx)(n.em,{children:"OS setting"})," (storage as user preference and OS as default)."]}),"\n",(0,t.jsxs)(n.li,{children:["Arkanoid ",(0,t.jsx)(n.em,{children:"paddle position"})," depends on ",(0,t.jsx)(n.em,{children:"time"})," and arrow ",(0,t.jsx)(n.em,{children:"pressed keys"})]}),"\n",(0,t.jsx)(n.li,{children:"... got it?"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Derived state depends on another state. And should change when its dependencies changes.\nIn other words, be reactive. Great article from ",(0,t.jsx)(n.a,{href:"https://reacttraining.com/blog/derived-state",children:"React Training - Derived State"}),"."]}),"\n",(0,t.jsxs)(n.h2,{id:"what-is-ui",children:["What is ",(0,t.jsx)(n.code,{children:"UI"}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:["It is what users perceive with their senses. Usually with eyes on screen. On web it is represented with ",(0,t.jsx)(n.em,{children:"DOM"}),".\nIt could be also sounds playing, haptic vibration feedback, flashlight, etc. But lets stick only with ",(0,t.jsx)(n.em,{children:"DOM"})," for now."]}),"\n",(0,t.jsxs)(n.p,{children:["As dev I expect framework to provide tools to update ",(0,t.jsx)(n.em,{children:"DOM"})," when state or derived state changes.\nIn React it is VDOM."]}),"\n",(0,t.jsxs)(n.p,{children:["Note that ",(0,t.jsx)(n.em,{children:"DOM"})," is classified as both ",(0,t.jsx)(n.code,{children:"UI"})," and ",(0,t.jsx)(n.code,{children:"state"}),". If we use ",(0,t.jsx)(n.em,{children:"DOM"})," as state and let our UI depends on it, we create cyclic dependency.\nBe careful in such situation to not create infinite loops."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(7856).c+"",title:"What the f* is f?",width:"1920",height:"960"})}),"\n",(0,t.jsxs)(n.h2,{id:"what-the-f-is-f",children:["What the f* is ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.code,{children:"f"})}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.code,{children:"f"})})," is something which connects ",(0,t.jsx)(n.code,{children:"state"})," and ",(0,t.jsx)(n.code,{children:"UI"}),".\nYou may say it is component tree with its render function. And you are IMO partialy right."]}),"\n",(0,t.jsxs)(n.p,{children:["Because this ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.code,{children:"f"})}),' function usually produces maaaaany UI pieces,\nit is "neccesity" to split the mental load into reusable smaller ',(0,t.jsx)(n.code,{children:"f"}),"s - components.\n",(0,t.jsx)(n.a,{href:"https://overreacted.io/a-chain-reaction/",children:"Dan Abramov"})," great article about it.\nThere are some properties component must meet to be helpful."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Composable - Ability to compose components into the full UI. Obviously."}),"\n",(0,t.jsx)(n.li,{children:"Reusable - Ability to define name and reuse component in different place. Also ability to pass arbitrary configuration (possibly reactive state) to adjust its behavior (props)."}),"\n",(0,t.jsx)(n.li,{children:"Colocated - Name, render logic, necessary state connetions, state derivation logic, documentation etc. should be placed within/beside component. If not, devs jumps back and forth in a codebase. Inconvenient."}),"\n",(0,t.jsx)(n.li,{children:"Encapsulated - Ability to work on a component independently by default. Opt-in to break barier. If not met, dev must mentaly thing about other code pieces. Which brings back the mental load."}),"\n",(0,t.jsx)(n.li,{children:"Reactive - Component must react on connected state the dev chooses. Any component on any state. If some rules are required to connect some state, it makes the development jammed."}),"\n",(0,t.jsx)(n.li,{children:"Arbitrary - The components boundaries must obey to the dev needs. If something forces component to split (or not to split), it effectivly removing the reason why components exists."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example. React components ergonomics."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"fucntion Post(slug) {                  // Name and state received via props\n    const posts = useQuery(fetchPosts) // state received via hook\n    const post = posts[slug]           // derivation logic\n    return <div>{post}</div>           // JSX UI description\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Name"})," of function to be referencable."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Receive state"})," via props or hooks (or higher order components)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Derive state"})," before JSX is produced. Right within render function or separated into custom function."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Produce UI description"})," in a form of JSX which is then consumed by VDOM."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"I said partialy. Components does not directly connects to states. They just receives a value/connection."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(2964).c+"",title:"f is not just component tree render function",width:"1920",height:"960"})}),"\n",(0,t.jsx)(n.h2,{id:"hooks-to-connect-state",children:"Hooks to connect state"}),"\n",(0,t.jsx)(n.p,{children:"We need some way to choose states our component depends on. We want to subscribe/observe changes and execute derivation and rendering logic with new values."}),"\n",(0,t.jsxs)(n.p,{children:["Hooks do a great job with its smart ",(0,t.jsx)(n.code,{children:"useEffect"})," and ",(0,t.jsx)(n.code,{children:"useRef"}),". Much hated for its ergonomics, but IMO does the job conceptually right.\nLets call custom hooks using ",(0,t.jsx)(n.code,{children:"useEffect"})," and ",(0,t.jsx)(n.code,{children:"useRef"})," ",(0,t.jsx)(n.strong,{children:"connection hooks"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Many libraries like ",(0,t.jsx)(n.code,{children:"tanstack-query"})," for external resources, ",(0,t.jsx)(n.code,{children:"react-router"})," for URL or ",(0,t.jsx)(n.code,{children:"react-use"})," for many kind of states were created.\nThey allows us (app devs) to connect to the state with one line of code from within the component. And dont car much how.\nReusable, colocated, encapsulated, reactive."]}),"\n",(0,t.jsx)(n.p,{children:"Those connecting hooks are a missing glue between state and a component render logic.\nThey subscribe to the state changes and make necessary derivation and rednering logic re-run accordingly."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(7740).c+"",title:"Hooks allows to connect to all kind of states",width:"1920",height:"960"})}),"\n",(0,t.jsx)(n.p,{children:"IMO observer pattern is best for DX. But sometimes it is not possible or wanted usually for performance.\nTypically for states far away from client like server data.\nEven for them we have mechanisms like websockets or long polling.\nBut usually we fallback to initial fetch during either component mount, server request or build.\nThen caching, invalidation and optimistic update mechanisms must enter the scene.\nBut call them connecting hooks anyway."}),"\n",(0,t.jsxs)(n.p,{children:["There are hooks which creates in-memory local component state itself ",(0,t.jsx)(n.code,{children:"useState"})," and ",(0,t.jsx)(n.code,{children:"useReducer"}),".\nBut lets stick with connecting word too."]}),"\n",(0,t.jsx)(n.h2,{id:"answer",children:"Answer"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"UI = f(state) = render(derive(connect(state)))\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is conceptually clean and mentally relieving model. I believe many devs love React 16.8+ because of those principles.\nI'm afraid new React server components breaks some of its beauty.\nBut lets close this post short a positive and keep this topic till the next time. :)"})]})}function h(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},7740:(e,n,s)=>{s.d(n,{c:()=>t});const t=s.p+"assets/images/hooks-fcd3a4b6afb5b3ff3ef4ec0f155945df.png"},2964:(e,n,s)=>{s.d(n,{c:()=>t});const t=s.p+"assets/images/render-is-not-f-1800ec95e683295f750220bb6a5bdc01.png"},3117:(e,n,s)=>{s.d(n,{c:()=>t});const t=s.p+"assets/images/state-f-UI-150b8e18eed68d44470587431e671f2f.png"},7856:(e,n,s)=>{s.d(n,{c:()=>t});const t=s.p+"assets/images/what-the-f-is-f-4b793ba7d089e77ce02d7f0116d87007.png"},7472:(e,n,s)=>{s.d(n,{I:()=>c,M:()=>r});var t=s(5668);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);