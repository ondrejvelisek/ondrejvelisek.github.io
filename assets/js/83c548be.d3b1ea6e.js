"use strict";(self.webpackChunk_torrta_docs=self.webpackChunk_torrta_docs||[]).push([[255],{501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var a=n(3206),r=n(5105),s=n(3331);const o={slug:"how-nextjs-breaks-react-fundamentals",image:"./rendering-runtime.png",draft:!1},i="How Next.js breaks React Fundamentals (Examples)",d={image:n(4357).A,authorsImageUrls:[]},c=[];function l(e){const t={p:"p",...(0,s.R)(),...e.components};return(0,r.jsx)(t.p,{children:"In the front-end world, there's an ongoing war over performance.\nRSC (React Server Components), currently implemented in the Next.js App router, serve as the official weapon aimed at improving startup performance.\nHowever, it seems that in the midst of this battle, we've forgotten about some fundamentals, resulting in a degraded DX (Developer Experience).\nThis article aims to provide examples of such DX issues in the current Next.js API.\nTowards the end, I outline a better proposal."})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},3206:e=>{e.exports=JSON.parse('{"permalink":"/how-nextjs-breaks-react-fundamentals","source":"@site/blog/2024-03-19-how-nextjs-breaks-react-fundamentals/index.mdx","title":"How Next.js breaks React Fundamentals (Examples)","description":"In the front-end world, there\'s an ongoing war over performance.","date":"2024-03-19T00:00:00.000Z","tags":[],"readingTime":13.05,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"how-nextjs-breaks-react-fundamentals","image":"./rendering-runtime.png","draft":false},"unlisted":false,"nextItem":{"title":"Conceptual Model of React and RSC","permalink":"/conceptual-model-of-react-and-rsc"}}')},4357:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/rendering-runtime-b80dd32377a2dd069b774c13fe0a6880.png"}}]);