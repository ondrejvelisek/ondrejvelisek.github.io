"use strict";(self.webpackChunk_torrta_docs=self.webpackChunk_torrta_docs||[]).push([[450],{6029:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"how-nextjs-breaks-react-fundamentals","metadata":{"permalink":"/how-nextjs-breaks-react-fundamentals","source":"@site/blog/2024-03-19-how-nextjs-breaks-react-fundamentals/index.mdx","title":"How Next.js breaks React Fundamentals (Examples)","description":"In the front-end world, there\'s an ongoing war over performance.","date":"2024-03-19T00:00:00.000Z","formattedDate":"March 19, 2024","tags":[],"readingTime":13.05,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"how-nextjs-breaks-react-fundamentals","draft":false},"unlisted":false,"nextItem":{"title":"Conceptual Model of React and RSC","permalink":"/conceptual-model-of-react-and-rsc"}},"content":"In the front-end world, there\'s an ongoing war over performance.\\nRSC (React Server Components), currently implemented in the Next.js App router, serve as the official weapon aimed at improving startup performance.\\nHowever, it seems that in the midst of this battle, we\'ve forgotten about some fundamentals, resulting in a degraded DX (Developer Experience).\\nThis article aims to provide examples of such DX issues in the current Next.js API.\\nTowards the end, I outline a better proposal.\\n\\n{/* truncate */}\\n\\nI want to make it explicitly clear that it\'s not my intention to blame, dishonor, or offend React and Next.js maintainers.\\nI have respect for each one of them and appreciate their work. Thank you for your contributions.\\nHowever, at the same time, I want to present what I believe is wrong about the current API design in a clear and constructive manner.\\nThis way, we can foster a discussion based on specific examples.\\n\\nThis article loosely follows on from my previous piece, [Conceptual Model of React and RSC](/conceptual-model-of-react-and-rsc).\\nReading it beforehand will provide better context for the following text, which I highly recommend.\\n\\n\\n\\n\\n\\n\\n## DX > Performance\\n\\nFirst of all, let me defend the idea that <abbr title=\\"Developer Experience\\">DX</abbr> is more important than performance in terms of framework API design.\\n\\nWhat do I, as an app developer, do when a change requirement arrives?\\nI throw some nasty components on a screen and start crafting.\\nI add basic visuals, connect real data, make it interactive, improve styles, add loading, error, and empty UI, write tests, refactor component structure, solve bugs, optimize performance.\\n\\nI usually do it in this order. I\'m sure each of us prefers a different order. Some do <abbr title=\\"Test Driven Development\\">TTD</abbr>,\\nsome like to start with a pixel-perfect design with mockup data. It\'s okay.\\nHowever, no devs I know care about performance at first.\\nActually, some believe it is bad practice and should be avoided.\\nDonald E. Knuth believes \\"Premature optimization is the root of all evil.\\" or\\nMichael A. Jackson stated, \\"First rule of optimization: Don\'t do it.\\"\\n\\nTo be crystal clear: I\'m not trying to convince you to not take a performance-first approach.\\nI\'m trying to convince you that many developers do not optimize at first. And it works well for us.\\nA general-purpose framework should, at least, support, but better embrace this flow.\\nFast delivery supported by great <abbr title=\\"Developer Experience\\">DX</abbr> with the best possible performance out-of-the-box.\\nThen provide easy optimization tooling like refactoring patterns, optimizer hinting, more aggressive caching config, etc.\\n\\nPersonally, I\'m okay if a framework brings some syntax overhead due to performance optimization.\\nBut it is unacceptable for me to hurt the clear conceptual model and fundamental principles.\\n\\n\\n\\n\\n\\n\\n## Fundamentals\\n\\nIn the [previous article](/conceptual-model-of-react-and-rsc/), I described a set of fundamental properties I believe any front-end framework should follow to provide a good <abbr title=\\"Developer Experience\\">DX</abbr>. Let\'s quickly recap them.\\n\\n\\n1. **Composable** - Or Homogeneity. The ability to compose components into the full UI.\\n   Ability to place any component into any other component without changing its behavior.\\n\\n2. **Reusable** - The ability to define a name and reuse a component in a different place. Also, it involves passing arbitrary configuration (possibly reactive state) to adjust its behavior (props).\\n\\n3. **Colocated** - The ability to place all dependencies inside a component: name, render logic, necessary state connections, state derivation logic, styling, documentation, etc. If this is not met, developers have to jump back and forth in a codebase.\\n\\n4. **Encapsulated** - The ability to work on a component independently. All paths to affect the component from outside should be blocked by default. Breaking the barrier, for example, by exposing props, should be an opt-in feature. If this is not met, developers must mentally consider other code pieces.\\n\\n5. **Reactive** - A component must react to the connected state chosen by the developer. Any component must be able to connect to any state, and the same applies to derivation hooks. If certain rules are required, development becomes jammed.\\n\\n6. **Arbitrary** - The component\'s boundaries must obey the developer\'s needs. Nothing must force a component to split or not to split, as it would destroy its purpose.\\n\\nIt seems to me that Next\'s implementation of <abbr title=\\"React Server Components\\">RSC</abbr> breaks some of these fundamental properties due to their performance-first design. Examples follow now.\\n\\n\\n\\n\\n\\n## Sample Component\\n\\nImagine a requirement to create a page with a random quote about programming on each page refresh. Quotes are saved in a remote database.\\nHow would you implement it in the Next.js App router?\\n\\nNext.js [data fetching docs](https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating)\\nsuggest a simple async-await function within the component render function.\\nLet\'s assume we have the `random(from, to)` lodash-like function for brevity.\\n\\n```tsx\\nasync function ProgrammingQuotes() {\\n    // Here I want to connect to the external database state of quotes \\n    const quotes = await fetch(\'/quotes\')\\n    // Here I want to connect to a random number state\\n    const index = random(0, quotes.length)\\n    return <div>{quotes[index]}</div>\\n}\\n```\\n\\nJust place it somewhere on a page and we\'re done. Excellent <abbr title=\\"Developer Experience\\">DX</abbr> so far.\\nIt\'s a server-only component by default. Resulting in a small bundle, no client-server round trips,\\ngreat <abbr title=\\"First Contentful Paint\\">FCP</abbr> and <abbr title=\\"Largest Contentful Paint\\">LCP</abbr>,\\nNo <abbr title=\\"Cumulative Layout Shift\\">CLS</abbr>. Awesome startup performance as promised.\\n\\n\\n\\n\\n\\n## 1. Forced to Lift State up\\n\\nImagine a change requirement. Our UX department likes the component and wants it in an existing comments feed modal.\\nThis modal is currently a client component. Somebody just wrote it as client because it needs some client-side state.\\n\\n```tsx\\n\'use client\'\\nasync function FeedModal() {\\n    const [open, setOpen] = useState(false)\\n    return <>\\n      <Button toggle={setOpen}>Show comments</Button>\\n      <Modal opened={opened} >\\n         <Feed/>\\n         // error-next-line\\n         <ProgrammingQuotes/>\\n      </Modal>\\n    </>\\n}\\n```\\n\\n...Oops. <mark class=\\"error\\">\\"Error: Client component can\'t be async\\"</mark>. What happened? `\'use client\'` makes all of its descendants client components.\\nBut our `ProgrammingQuotes` assumes it is a server component.\\nI see three options for how to solve it with current Next.js abilities.\\n\\na. **Use client-side** data fetching solutions like `tanstack-query`, `useSWC`, or the new `use` React API. This means giving up on RSC and its performance benefits. \\n\\nb. **Lift fetch up** into a first server ancestor. It is not enough to lift quotes fetching to `FeedModal`.\\n   We need to go higher and then drill the fetched quote data via props.\\n   The code **Colocation** property is torn apart.\\n\\nc. **Refactor modules** so `ProgrammingQuotes` is passed as children to `FeedModal`.\\n   However, it forces me to compose components in a certain way. It does not obey my needs and therefore breaks the **Arbitrary** boundary property.\\n   Furthermore, I\'m forced to expose a children prop. Which breaks the **Encapsulation** property.\\n\\nAll of the options have a negative impact on my work. Either on performance or worse project maintainability.\\n\\n\\n\\n\\n\\n\\n## 2. Forced to Split a Component\\n\\nImagine a change requirement. A quote is not random but should change every five seconds in the order received from a database.\\nA way to access some counting state is with `setInterval` so let\'s use it.\\nI would adjust our component like this:\\n\\n```tsx\\nasync function ProgrammingQuotes() {\\n    const quotes = await fetch(\'/quotes\')\\n    // highlight-next-line\\n    const index = useCounter(5000)\\n    return <div>{quotes[index]}</div>\\n}\\n\\nfunction useCounter(delay) {\\n    // This hook is simplified for brevity\\n    // error-next-line\\n    const [count, setCount] = useState(0)\\n    // error-next-line\\n    useEffect(() => setInterval(() => setCount(count + 1), delay))\\n    return count\\n}\\n```\\n\\n...Oops. <mark class=\\"error\\">\\"Error: Server component can\'t use \'useState\' and \'useEffect\' hooks\\"</mark>.\\nSince server components can\'t react to time changes (in other words, they can\'t reactively connect to time state), we need to use a client component.\\nSo maybe add `\\"use client\\"` to the top of the file?\\n...Oops. <mark class=\\"error\\">\\"Error: Client component can\'t be async\\"</mark>. What do we do?\\nI see the following options:\\n\\na. **Use client-side fetching**, but as stated above, we give up on <abbr title=\\"React Server Components\\">RSC</abbr> and their performance.\\n\\nb. **Lift fetch up**, but as stated, it breaks the code **Colocation**.\\n\\nc. **Split the component** into a server parent and a client child. The parent is async with `fetch`, and the child uses `useCounter`. However, we are actually forced to put them into separate file modules.\\n   So we end up with dislocated code. **Colocation** is broken anyway.\\n\\nAgain, I have no good choice. I have to sacrifice.\\nAt this point, let me remind you of a talk about the importance of colocation\\nby Dan Abramov in his [Introduction of hooks (YouTube)](https://www.youtube.com/watch?v=dpw9EHDh2bM&t=2600s).\\n\\n\\n\\n\\n\\n\\n## 3. Forced to Prop Drilling\\n\\nImagine a change requirement. We want to add quotes filtered by author. The author is placed in the URL query param, so it can be shared, and only quotes of such author appear.\\nAfter the previous example, we end up with two components.\\n\\n```tsx\\nasync function ProgrammingQuotesServer() {\\n    // Here I want to connect to the URL query param state\\n    // error-next-line\\n    const author = useSearchParam(\'author\');\\n    const quotes = await fetch(`/quotes?author=${author}`)\\n    return <ProgrammingQuotesClient quotes={quotes}/>\\n}\\n```\\n```tsx\\n\'use client\'\\nasync function ProgrammingQuotesClient({ quotes }) {\\n    const index = useCounter(5000)\\n    return <div>{quotes[index]}</div>\\n}\\n```\\n\\n[Next.js docs](https://nextjs.org/docs/app/api-reference/functions/use-search-params#server-components)\\nsuggest `useSearchParam` hook or `searchParams` props.\\n\\nSo let\'s try `useSearchParam` first.\\n...Oops. <mark class=\\"error\\">\\"Error: Server component can\'t use \'useSearchParam\' hook\\"</mark>\\nOkay. `searchParams` prop will help. ...Oops. This prop is accessible only in the top-level page component.\\nI see the following options:\\n\\na. **Use client-side fetching** means no RSC benefits.\\n\\nb. **Drill props** down from the top-level page. In large apps with a deep component tree, this is unmaintainable.\\n\\nc. **Create context** for URL params and then access it with `useContext` from the server component. Uf, a lot of work for such a basic use-case.\\n   But it\'s solved, and I can reuse this context for all other URL params and all components, right?\\n\\n\\n\\n\\n\\n\\n## 4. Forced to Give up on Server\\n\\nImagine a last change requirement. This little component should be moved to a footer component. The footer is in a page layout component tree.\\n...Oops. `searchParams` prop is inaccessible in layouts. What do I do? It\'s very frustrating, but it seems I need to refactor and convert it to a client component to be able to use `useSearchParam`.\\n...Oops. <mark class=\\"error\\">\\"Error: Client component can\'t be async\\"</mark>.\\nAm I just being forced to choose between server-side fetching or Next.js layouts feature?\\n\\n\\n\\n\\n\\n## Summary\\n\\nThose simple examples break most of the defined rules.\\nThe `ProgrammingQuotes` component can\'t be easily reused in a modal or footer.\\nIts code is dislocated into several modules.\\nThe author search query is inaccessible from the component itself.\\nI\'m forced to expose children as a component prop\\nand create artificial Client and Server components.\\n\\nI want to emphasize that these examples are not some edge-case nonsense. Similar requirements come up every day.\\nI\'m 100% sure that at least one example has happened to every developer who creates some non-trivial app in the Next.js App router.\\nI truly believe Colocation, Encapsulation, and Arbitrary composition are crucial properties for efficient development.\\nThey are necessary for team cooperation and maintaining mid-large codebases.\\nEspecially for long-term projects with many change requirements over the years where many developers read and manipulate the code and need to quickly understand what is happening.\\nThat\'s the reason I\'m writing this. So we can design better framework APIs.\\n\\nMany of you argue that I can use the old client-side approach and then gradually move to the server.\\nStart with a full client-side app and if performance is needed, push the client boundary down through a component tree.\\nYou are smart.\\nI see three catches. 1. this is not recommended nor mentioned by the Next.js team. 2. <abbr title=\\"In My Opinion\\">IMO</abbr> is too much work.\\nBoth, writing but more importantly mental.\\nIt is not just putting `\'use client\'` at the top of the module, but also modifying async code, using different methods to access URLs, refactor component boundaries and more.\\n3. I believe there is a way to provide better out-of-the-box performance without compromising on DX.\\nAnd still keep the ability to achieve the same performance as current Next.js with an easier optimization path.\\n\\n\\n\\n\\n\\n\\n## A Better Approach\\n\\nIn Next.js implementation of RSC, we define if a component is server or client at the module level.\\nIf the compiler sees `\'use client\'`, the code is bundled and shipped to the client. It stays server-only otherwise.\\nIn other words, we are choosing where a component is rendered, respectively its runtime environment.\\nThis component runtime then limits its capabilities, e.g., using async fetching or client state.\\n\\nThe last example with layouts limits component capabilities based on a module too.\\nIf the compiler sees a file named `layout.tsx`, its components are considered \\"more static\\".\\nSome more dynamic state like search params can\'t be used.\\n\\nI believe <mark>component capabilities should never be limited by a module-level configuration</mark>.\\nAny component must be capable of using any feature. <mark>Where rendered and when re-rendered should be deduced automatically</mark>\\nby features used within the component.\\n\\nBoth runtime environment and re-rendering frequency are unrelated to my business goals. \\nIdeally, it is an implementation detail and a framework should shield me from it.\\nThe best-performing strategy should be chosen by the framework automatically.\\nIt is the same as how re-rendering works on the client nowadays. Developers use some state within a component, and it re-renders when the state changes.\\nNo manual tweaking of shouldComponentUpdate. The same applies to signals.\\n\\nParadoxically, Next.js inspired me with this idea.\\nIt chooses between build and request-time rendering based on [Dynamic functions](https://nextjs.org/docs/app/building-your-application/rendering/server-components#dynamic-functions)\\nused within the component.\\nFor [some reason](https://nextjs.org/docs/app/api-reference/file-conventions/layout#layouts-do-not-receive-searchparams), they limit this deduction in layouts.\\nI believe this automatic deduction concept should be used more broadly.\\n\\n![Components runtime environment rendering diagram](./rendering-runtime.png)\\n<p style={{ textAlign: `center` }}>*Components go through runtimes and if some state is needed, they re-render. Pass the runtime otherwise.*</p>\\n\\nIn the end, let\'s think together about this algorithm of automatic runtime environment deduction.\\nFirst of all, what environments do we have available, respectively where could the component be rendered?\\nFor sure on a client in a browser. Also on a server. We should distinguish between static rendering during build and dynamic rendering during server request.\\nThere are more flavors, like edge runtime or <abbr title=\\"Deferred Static Generation\\">DSG</abbr>, but let\'s stick with just those three for now.\\nLet\'s sort them by performance. For most cases, it is like this: Build, Server, Client.\\nI want to choose the most performant automatically if nothing forces me otherwise.\\n\\nWhat forces a component to use a less performant runtime? It is when a component needs some more dynamic or interactive features, respectively connects to some kind of dynamic or interactive state.\\nWhen a component connects to `searchParam`, `cookie`, or `headers`, those states are not known during build-time and it must be rendered during server request.\\nThis is what Next.js does with dynamic functions I mentioned above.\\nSimilarly, when a component connects to `useState`, `setInterval`, or `onMouseEnter`, it must be rendered on the client because those states are not accessible on the server.\\n\\nI hope your head is screaming now \\"But Ondrej, it would not work! Bundling is a compile-time feature!\\".\\nIf so, I\'ve done a good job explaining my thoughts. Congratulations. You understand the concept correctly.\\nThere are many questions to be answered.\\nWhat if a callback function is passed to a component as a prop?\\nAre there situations a component is rendered in multiple runtimes?\\nMany details are unresolved. But let\'s stop here.\\n\\nI plan to write a following article where I dive into the API of a new fictional framework and also touch some implementation possibilities.\\nUntil then, I invite you to think about its DX benefits and how you would implement it. Try to think how and not why can\'t.\\nAnd let me know what you think.\\n\\nThanks for reading.\\n\\n\\n\\nimport Discuss from \'@site/components/Discuss\'\\n\\n<Discuss\\n    twitter=\\"https://x.com/search?q=https%3A%2F%2Fondrejvelisek.github.io%2Fhow-nextjs-breaks-react-fundamentals%2F\\"\\n    reddit=\\"https://www.reddit.com/r/nextjs/comments/1bipvwe/how_nextjs_breaks_react_fundamentals_with_examples/\\"\\n    dev=\\"https://dev.to/ondrejvelisek/how-nextjs-breaks-react-fundamentals-with-examples-2lof\\"\\n    />"},{"id":"conceptual-model-of-react-and-rsc","metadata":{"permalink":"/conceptual-model-of-react-and-rsc","source":"@site/blog/2024-03-03-conceptual-model-of-react-and-rsc/index.mdx","title":"Conceptual Model of React and RSC","description":"Building web apps is a complex problem. We need simple high-level mental structures to support such a heavy load.","date":"2024-03-03T00:00:00.000Z","formattedDate":"March 3, 2024","tags":[],"readingTime":8.985,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"conceptual-model-of-react-and-rsc","draft":false},"unlisted":false,"prevItem":{"title":"How Next.js breaks React Fundamentals (Examples)","permalink":"/how-nextjs-breaks-react-fundamentals"},"nextItem":{"title":"Practical limits of React hooks - Recursion","permalink":"/practical-limits-of-react-hooks-recursion"}},"content":"Building web apps is a complex problem. We need simple high-level mental structures to support such a heavy load.\\nThese structures allow us to offload unnecessary details from our brains, so we can focus on the important parts of our code.\\n`UI = f(state)` is one of them. Every one of us knows this formula. But do you know what it reflects in the real world?\\nWhat is `UI`? What is `state`? What the f* is *`f`*? And how is it affected by RSC (React Server Components)? Here is my view.\\n\\n{/* truncate */}\\n\\n![Holistic state philosophy](./holistic-state.png)\\n\\nInitial clarifications:\\n- I reckon the state mutates, but I ignore how it is mutated.\\n- I show examples of React, but most of the following applies to other UI frameworks like Angular, Vue, Svelte, Qwik, or Solid.\\n\\n\\n\\n## What is `state`?\\n\\nLet\'s reconsider: `UI = f(state)`. In other words, `state` is what our `UI` depends on. If a dependency changes, we want to change the `UI`. This phenomenon is called **reactivity**.\\n\\nI believe that state encompasses more than just in-memory local component state (`useState`) or in-memory global app state (Redux, Jotai, Zustand).\\nI\'m not alone (\\n[TkDodo](https://tkdodo.eu/blog/react-query-as-a-state-manager),\\n[ByteGrad (YouTube)](https://www.youtube.com/watch?v=ukpgxEemXsk),\\n[Kent C. Dodds](https://x.com/kentcdodds/status/1349173470567964673),\\n[Dave Rupert](https://daverupert.com/2024/02/ui-states/),\\n[Dan Abramov](https://overreacted.io/the-two-reacts/)\\n). Many developers agree that at least the URL and server data constitute some kind of state too. But I believe it has a much wider scope.\\n\\nLet\'s consider some `UI` examples:\\n\\n- Blog post UI depends on the slug present in the **URL** address.\\n- Server files explorer UI depends on **server** files.\\n- The newest movies list UI relies on the **third-party** resource of OMDB. \\n- Ticking clock UI depends on **time**.\\n- Drawing canvas UI relies on the mouse position of the user\'s **input device**.\\n- User profile UI depends on the session token stored in a **cookie**.\\n- The \\"Keep me signed in on this device\\" UI depends on a flag in **local storage**.\\n- OS preferred dark mode UI depends on the **OS setting**.\\n- Devtools debug UI depends on an **env variable**.\\n- Panoramic background UI depends on the scroll position of a **DOM** element.\\n- ... Got the idea?\\n\\nI refer to these states as **source states**. It\'s important to note that a state may be *derived*. For example:\\n\\n- The current post *slug* depends on the **URL**.\\n- The current post *minutes read* depends on the *slug* and **server files**.\\n- The current *user role* depends on authorization data in the **server database** and the session token from the **cookie**.\\n- The *preferred dark mode* depends on **local storage** and the **OS setting** (storage as user preference and OS as default).\\n- The minutes value in a pausable stopwatch depends on **time** and the spacebar **pressed key**.\\n- ... Ok. You got it.\\n\\nDerived state depends on another state and should change when its dependencies change. In other words, it should be reactive. You can find a great deep-dive into this topic on [React Training - Derived State](https://reacttraining.com/blog/derived-state).\\n\\nThe boundary between **source** and *derived* states is blurry. For example, the server database, local storage, OS settings, all of those depend on file system data.\\nBut let\'s mark state as \\"source\\" when it depends solely on states inaccessible by available technologies. For example, I can\'t access some private browser file with local storage data from the browser window environment.\\n\\nI would like to be explicit and distinguish between in-memory state and all those kinds of states.\\nFor myself, I name it a **Holistic state**.\\n\\n\\n\\n## What is `UI`?\\n\\nIt is what users perceive with their senses, usually with their eyes on the screen. On the web, it is represented with the **DOM**.\\n\\nThe wilderness out there is more diverse.\\nOur user might be a machine like a search indexing bot, but they also work on DOM elements and attributes.\\nThere could be assistive technologies like a screen reader, working on the DOM as well.\\nA very important piece of UI is the URL in the browser address bar. Since it is always in sync with the URL state, I like to think about it as a source state rather than UI. \\nUsers also perceive playing sounds, haptic vibration feedback, flashlight, etc.\\nLet\'s simplify and stick with DOM only. It\'s worth mentioning that the following applies to other UI pieces similarly.\\n\\nAs a developer, I expect the framework to provide tools to describe UI and update the DOM when the description changes.\\nIn React and Vue, those tools are JSX and VDOM. In Solid, it is a signal dependency graph.\\n\\nNote: I classified DOM as both UI and source state. If we use DOM as a source state and let our UI depend on it, we create a cyclic dependency.\\nSometimes it is necessary, e.g., when measuring text width. Be careful in such situations to not create infinite loops. The same applies to the URL.\\n\\n\\n\\n\\n## What the f* is *`f`*?\\n\\n*`f`* is something that connects `state` and `UI`.\\nYou may say it is the component tree with its render function. And you are <abbr title=\\"In My Opinion\\">IMO</abbr> partially right. \\n\\nBecause this *`f`* function usually produces many UI pieces,\\nit is a \\"necessity\\" to split the mental load into reusable smaller `f`s - components.\\n[Dan Abramov](https://overreacted.io/a-chain-reaction/) wrote a great article about it.\\n\\nReact component ergonomics example:\\n```tsx\\nfunction Post(slug) {                  // name and state received via props\\n    const posts = useQuery(fetchPosts) // state received via hook\\n    const post = posts[slug]           // derivation logic\\n    return <div>{post}</div>           // JSX UI description\\n}\\n```\\n\\n- **Name** of the function to be referenceable.\\n- **Receive state** via props or hooks (or higher-order components).\\n- **Derive state** before JSX is produced. Right within the render function or separated into a custom function.\\n- **Produce UI description** in the form of JSX which is then consumed by VDOM.\\n\\nI said partially. Components do not (usually) directly connect to states. They just receive a value/connection.\\n\\n\\n\\n\\n## Connecting States\\n\\nWe need a way to choose the states upon which our component depends. We want to subscribe/observe changes and execute derivation and rendering logic with new values.\\n\\nHooks do an excellent job with their smart `useEffect` and `useRef`. Much maligned for their ergonomics, but in my opinion, they get the conceptual job right. Let\'s refer to custom hooks using `useEffect` and `useRef` as **connecting hooks**.\\n\\nReact connecting hook ergonomics example:\\n```tsx\\n// name and config received via props\\nfucntion useStopwatch(delay) {          \\n    const [ticks, setTicks] = useState(0)\\n    useEffect(() => {         \\n        // subscribing to real world state (time)            \\n        const timer = setInterval(() => setTicks(prev => prev + 1), delay)\\n        return () => clearInterval(timer)\\n    }, [delay])\\n    // Returning reactive state\\n    return ticks                          \\n}\\n```\\n\\nMany libraries like `tanstack-query` for external resources, `react-router` for URLs, or `react-use` for various kinds of states have been created. They allow us (app devs) to connect to the source state with just one line of code from within the component. And don\'t care much about how. Great abstraction.\\n\\nThese connecting hooks are the missing glue between state and component rendering logic. They subscribe to state changes and rerun the necessary derivation and rendering logic accordingly.\\n\\nIn my opinion, the observer pattern is best for developer experience (DX). But sometimes it is not possible or desired, usually for performance reasons. Typically, this is the case for states far away from the client, like server data. Even for them, we have mechanisms like websockets or long polling. But usually, we fall back to the initial fetch during either component mount, server request, or build. Then caching, invalidation, and optimistic update mechanisms must come into play. But let\'s still call them connecting hooks anyway.\\n\\nThere are hooks that create state themselves, like `useState` and `useReducer`, and simultaneously connect to it. But let\'s stick with the word \\"connecting\\" only.\\n\\n\\n\\n## Developer Experience\\n\\nSo the real-world picture of `UI = f(state)` for app developers could be condensed into:\\n```js\\nDOM = render(derive(connect(holistic_state)))\\n```\\n\\nIt is a super simple mental model for such a complex problem as a web app. It is **conceptually clean and mentally relieving**. Modern client-side <abbr title=\\"Single Page Application\\">SPA</abbr>s follow this conceptual model quite precisely. I believe many devs love React 16.8+ (hooks introduced) because of this mental model, myself included. It speeds up development, saves time, and money.\\n\\nBut for the model to be helpful, some additional properties must be met:\\n\\n1. **Composable** - Ability to compose components into the full UI.<br/>\\n   Ability to <mark>place any component into any other component</mark>.\\n\\n2. **Reusable** - Ability to define a name and reuse a component in a different place.<br/>\\n   Also, the ability to pass arbitrary configuration (possibly reactive state) to adjust its behavior (props).\\n\\n3. **Colocated** - Name, render logic, necessary state connections, state derivation logic, documentation, etc.<br/>\\n   Devs should be able to <mark>place all those dependencies inside a component</mark>.<br/>\\n   If not, devs jump back and forth in a codebase. Inconvenient.\\n\\n4. **Encapsulated** - Ability to work on a component independently by default. Opt-in to break the barrier.<br/>\\n   If not met, devs must mentally think about other code pieces.\\n   Note: this is broken by React cascading memoization. Frustrating.\\n\\n5. **Reactive** - Component must react to connected state the dev chooses.<br/>\\n   <mark>Any component must be able to connect to any state</mark>. The same applies for derivation hooks.<br/>\\n   If some rules are required, it makes development jammed.\\n\\n6. **Arbitrary** - The component\'s boundaries must obey the dev\'s needs.<br/>\\n   <mark>Nothing must force a component to split (or not to split)</mark>.<br/>\\n   Same for derivation hooks. It destroys their purpose otherwise.\\n\\nWhy does all of this matter? Because the conceptual model needs to be solid. All the time. If we develop some complex logic with those principles in mind, it can\'t happen due to broken principles that we need to refactor. I want to trust it will support me during heavy loads.\\n\\nI can handle some configuration and syntax overhead like useEffect, CSS integration, or Webpack. I\'m fine to write a few extra chars if the conceptual model stays clear.\\n\\nI know React client <abbr title=\\"Single Page Application\\">SPA</abbr>s suffer from bad performance. I believe that the conceptual model is so important; it should not be broken by enforcing good performance patterns. The framework should remain loyal to the clear model and do its best for performance. In addition, provide tools to optimize like optimization hints, refactoring patterns, or more aggressive caching config.\\n\\nIt seems to me <abbr title=\\"React Server Components\\">RSC</abbr> and NextJS just <mark>break some fundamental properties of this conceptual model</mark> because of their performance-first design. And I believe it is not necessary to achieve their goals. But let\'s stop here and keep this for the next article.\\n\\n> UPDATE: follow-up article [How Next.js breaks React Fundamentals (Examples)](/how-nextjs-breaks-react-fundamentals/) is out.\\n\\nThanks for reading.\\n\\n\\n\\nimport Discuss from \'@site/components/Discuss\'\\n\\n<Discuss\\n    twitter=\\"https://x.com/search?q=https%3A%2F%2Fondrejvelisek.github.io%2Fconceptual-model-of-react-and-rsc%2F\\"\\n    reddit=\\"https://www.reddit.com/r/reactjs/comments/1b6eowb/conceptual_model_of_react_in_the_rsc_age/\\"\\n    dev=\\"https://dev.to/ondrejvelisek/conceptual-model-of-react-in-the-rsc-age-5bn5\\"\\n    />"},{"id":"practical-limits-of-react-hooks-recursion","metadata":{"permalink":"/practical-limits-of-react-hooks-recursion","source":"@site/blog/2022-03-23-practical-limits-of-react-hooks-recursion/index.mdx","title":"Practical limits of React hooks - Recursion","description":"While ago, I started using React hooks. The simplicity, homogenity and composability sounded great.","date":"2022-03-23T00:00:00.000Z","formattedDate":"March 23, 2022","tags":[],"readingTime":3.925,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"practical-limits-of-react-hooks-recursion","draft":false},"unlisted":false,"prevItem":{"title":"Conceptual Model of React and RSC","permalink":"/conceptual-model-of-react-and-rsc"}},"content":"While ago, I started using React hooks. The simplicity, homogenity and composability sounded great.\\nBoth components and hooks are simple functions. I can easily react on state changes from memory, \\nlocal storage, location URL and server the same way - with hooks. Mental model stays simple.\\nMy app is just a big function which consumes state and produces DOM. This big function is composed \\nof a smaller functions which are composed of smaller functions and so on. But there were obstacles \\nI\'ve started to encounter and in the end I hit the hard limit of React hooks.\\n\\n{/* truncate */}\\n\\n> UPDATE 2024: new React [`use`](https://react.dev/reference/react/use) hook may finally solve following limitation \\n> (if you accept `<Suspense/>` as a good pattern)\\n\\n## Model app\\n\\nEach app has some data model defined with entities and relations between them. Lets say we have company \\nDepartment and Employee where department consists of other departments and/or direct employees. \\nOne employee can directly work for exactly one department. Cycles in department hierarchy are prohibited.\\n\\nOur Backend implements REST endpoints.\\n\\n```code title=\\"/departments\\"\\nreturns list of all department ids\\n```\\n\\n```code title=\\"/departments/:departmentId\\"\\nreturns list of sub-department ids\\nand list of direct employee ids\\n```\\n\\nThere are three product requirements.\\n\\n## Pleasant walk with basic hooks\\n\\nFirst product requirement is simple. User selects a department and wants to see number of direct employees.\\nPfff, its simple. Just implement this custom hook which uses department REST endpoint and use it in a component.\\n\\n```tsx\\nconst useDirectEmployeeCount(\\n    departmentId: string\\n): number =>\\n    useDirectEmployeeIds(departmentId).length\\n```\\n\\n```tsx\\nconst useDirectEmployeeIds(\\n    departmentId: string\\n): Array<string> =>\\n    useDepartment(departmentId).directEmployeeIds\\n```\\n\\n```tsx\\nconst useDepartment(\\n    departmentId: string\\n): Department =>\\n    useQuery(\\n        [\'departments\', departmentId],\\n        () => fetch(`/departments/${departmentId}`)\\n    ).data\\n```\\n\\nOur backend implements exactly this endpoints so we use `react-query` and we are done.\\nThere are some loading and error states which I omitted, we can use fancy Suspend and ErrorBoundary,\\nbut we understand the code.\\n\\n\\n## Obstacles with looping\\n\\nSecond product requirement is simple. User needs to select multiple departments and see sum of direct employees.\\nOk, simple. I already have code for one. So simply loop it over multiple selected departments and sum the result.\\n\\n```tsx\\nconst totalCount = sum(\\n    departmentIds.map(\\n        departmentId => useDirectEmployeeCount(departmentId)\\n    )\\n)\\n```\\n\\nWait! It is a hook and there are rule of hooks. Anoying but still doable.\\nLets reimplement `useDirectEmployeeCount` to support multiple department ids. \\nThen I can sum them like this.\\n\\n```tsx\\nconst departmentCounts = useDirectEmployeeCount(departmentIds)\\nconst totalCount = sum(departmentCounts)\\n```\\n```tsx\\nconst useDirectEmployeeCount(\\n    departmentIds: Array<string>\\n): Array<number> =>\\n    useDirectEmployeeIds(departmentIds)\\n        .map(employeeIds => employeeIds.length)\\n```\\n\\nBut wait! I need to reimplement `useDirectEmployeeIds` too. Very anoying.\\n\\n```tsx\\nconst useDirectEmployeeIds(\\n    departmentIds: Array<string>\\n): Array<Array<string>> =>\\n    useDepartment(departmentIds)\\n        .map(department => department.directEmployeeIds)\\n```\\n\\nBut wait! Grrr...\\n\\n```tsx\\nconst useDepartment(\\n    departmentIds: Array<string>\\n): Array<Department> =>\\n    useQueries(departmentIds.map(departmentId => ({\\n        queryKey: [\'departments\', departmentId],\\n        queryFn: () => fetch(`/departments/${departmentId}`)\\n    })))\\n        .map(result => result.data)\\n```\\n\\nUf. Done. I\'m glad it is a small project with just three hooks. Tell me the last requirement.\\n\\n## Limits with recursion\\n\\nThird and last product requirement is simple. User needs to select department and see sum of direct and\\nindirect employees (including employees from all sub-departments and their sub-departments and so on).\\nOk, simple. I already have code for multiple departments. So simply recursively call it and sum the result.\\n\\n```tsx\\nconst useIndirectEmployeeCount(\\n    departmentIds: Array<string>\\n): Array<number> => {\\n    const directCount = useDirectEmployeeCount(departmentIds);\\n    const departments = useDepartment(departmentIds);\\n    const subDepartmentIds = departments.flatMap(department => department.subDepartmentIds);\\n    const indirectCount = useIndirectEmployeeCount(subDepartmentIds);\\n    return directCount + indirectCount\\n}\\n```\\n\\nWait.\\n\\n> <mark class=\\"error\\">Error: Maximum Call Stack Size Exceeded</mark>\\n\\nOh. You almost got me. I just forgot a recursive break, right?\\n\\n```tsx\\nconst useIndirectEmployeeCount(\\n    departmentIds: Array<string>\\n): Array<number> => {\\n    const directCount = useDirectEmployeeCount(departmentIds);\\n    const departments = useDepartment(departmentIds);\\n    const subDepartmentIds = departments.flatMap(department => department.subDepartmentIds);\\n    if (subDepartmentIds.length === 0) {\\n        return directCount;\\n    }\\n    const indirectCount = useIndirectEmployeeCount(subDepartmentIds);\\n    return directCount + indirectCount\\n}\\n```\\n\\nWait.\\n\\n> <mark class=\\"error\\">Error: React Hook \\"useIndirectEmployeeCount\\" is called conditionally.</mark>\\n\\n...\\n\\n## Last words\\n\\nMental model stays simple. Everything is a simple function. My app is one big function composed of smaller and\\nsmaller ones. It trully sounds great! But in a real world, hooks are not so simple, homogen and composable.\\nThere are obstacles and limits mainly because of rule of hooks.\\n\\nThis post is not about saying React hooks are bad. I wrote it because I did not find any resources\\non such obstacles and limits. The React world looks like hooks are always pleasant walk trought the rosy garden.\\nBut they are not.\\n\\nFor now I don\'t know how to elegantly solve the recusrion example. Are there some resources on this?\\nDo you have following thougts? Maybe I\'m not the only one struggling.\\n\\nThanks for reading.\\n\\n\\n\\nimport Discuss from \'@site/components/Discuss\'\\n\\n<Discuss\\n    twitter=\\"https://x.com/search?q=https%3A%2F%2Fondrejvelisek.github.io%2Fpractical-limits-of-react-hooks-recursion%2F\\"\\n    reddit=\\"https://www.reddit.com/r/reactjs/comments/tkog71/practical_limits_of_react_hooks_recursion/\\"\\n    dev=\\"https://dev.to/ondrejvelisek/practical-limits-of-react-hooks-recursion-555\\"\\n    />"}]}')}}]);